'=======================================================================================
'Unifloc 7.6  Vulpes zerda                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
'
' Класс для описания характеристик погружного двигателя (как ассинхронного, так и вентильного)
'
Option Explicit
' параметры асинхронного двигателя номинальные
' предполагается что ассинхронный двигатель соединен звездой
' надо будет сделать возможность задания треугольником и сделать вентильные привода
Private p_IsInduction As Boolean   ' признак того что двигатель ассинхронный
Private p_IsStar As Boolean        ' соединение звезда (альтернатива - треугольник если ассинхронный)
Private p_nom_data As MOTOR_DATA
Private p_data As MOTOR_DATA
'Private p_Pnom_kW As Double        ' номиналная мощность двигателя (механическая на валу)
'Private p_Unom_phase_V As Double    ' номинальное фазное напряжение работы двигателя
'Private p_Unom_lin_V As Double      ' номинальное линейное напряжение двигателя
'Private p_Inom_phase_A As Double    ' номинальный фазный ток, А
'Private p_Inom_lin_A As Double      ' номинальный линейный ток, А
'
'Private p_Fnom_Hz As Double        ' номинальная частота вращения  магнитного поля статора, Гц
'Private p_Effnom_d As Double       ' номинальный КПД установки
'Private p_CosPhinom As Double      ' номинальный косинус фи (коэф мощности)
'Private p_Mnom_Nm As Double        ' номинальный момент развиваемый двигателем Нм
'Private p_Snom_d As Double         ' номинальное скольжение
Private p_lambda_d As Double       ' отношение максимального момента к номинальному для АД
Private p_Istart_A As Double       ' пусковой ток для двигателя
' параметры работы асинхронного двигателя рабочие
'Private p_U_phase_V As Double       ' рабочее фазное напряжение двигателя
'Private p_U_lin_V As Double         ' рабочее линейное напряжение двигателя
'Private p_I_phase_A As Double       ' рабочий фазный ток  двигателя
'Private p_I_lin_A As Double         ' рабочий линейный ток двигателя
'
'Private p_S_d As Double             ' рабочее скольжение двигателя
'Private p_F0_Hz As Double           ' синхронная частота вращения поля (питающего напряжения)
'Private p_load As Double            ' загрузка двигателя при текущих параметрах
'Private p_CosPhi As Double
'Private p_Eff_d As Double          ' КПД асинхронного двигателя
'Private p_Pel_kW As Double         ' электрическая мощность потребляемая при текущих параметрах работы
'Private p_Pm_kW As Double          ' мощность на валу при текущих параметрах работы
Private p_M_Nm As Double           ' момент развиваемый при текущих параметрах
' параметры холостого хода
Private p_Ix_A As Double            ' ток холостого хода
Private p_cosPhix_d As Double       ' коэф мощности при холостом ходе
Private p_Phix_d As Double          ' коэф мощности при холостом ходе
' параметры двигателя по схеме замещения
Private p_R1  As Double             ' активное сопротивление обмотки статора для схемы замещения
Private p_R2_ As Double             ' активное сопротивление обмотки ротока приведеное к обмотке статора
Private p_xk  As Double             ' индуктивное сопротивление обмоток для режима короткого замыкания
Private p_xi  As Double
Private c1    As Double             ' коээфициент приведения Т образной схемы к Г образной
' параметры из каталога, которые потенциально могут пригодится
Private p_minDcas_mm As Double      ' минимальный диаметр скважины, мм
Private p_minVliq_msec As Double    ' минимально допустимая скорость жидкости для охлаждения, м/с
Private p_NumSections As Integer    ' количество секций
Private p_Legth_m  As Double        ' установочная длина, м  вместе с гидрозащитой
Private p_HmesTop As Double                 ' глубина установки ЭЦН (по верхней части)
Private p_M_kg  As Double           ' масса, кг
Private p_Diam_mm As Double         ' диаметр насоса - габарит
Private p_ID As Integer
Private p_MotorName As String
Private p_ManufacturerName As String
'Private p_PowerMotor_Wt As Double           ' Мощность потребляемая двигателем (электрическая)
'Private p_EffMotor_d As Double              ' КПД двигателя
Private c_PCurve As New TInterpolation       ' кривая распределения давления вдоль насоса   (как снаружи, так и внутри)
Private c_TCurve As New TInterpolation       ' кривая распределения температуры флюида вдоль насоса
Private p_MotorSource As Integer             ' источник данных по мотору.0 дефлтный, другой потом
'публичное свойство для номинального момента двигателя
Public Property Get Mnom_Nm() As Double
    Mnom_Nm = p_nom_data.Mshaft_Nm
End Property
' максимальный момент двигателя
Public Property Get Mmax_Nm() As Double
' рассчитывается из перегрузочной способности
    Mmax_Nm = Mnom_Nm * p_lambda_d
End Property
' отношение максимального момента к номинальному
Public Property Get lambda_d() As Double
    lambda_d = p_lambda_d
End Property
'Public Property Let Lambda_d(val As Double)
'    p_lambda_d = val
'End Property
' номинальное фазное напряжение на двигателе
Public Property Get Unom_phase_V() As Double
    Unom_phase_V = p_nom_data.U_phase_V
End Property
'Public Property Let Unom_phase_V(val As Double)
'    p_Unom_phase_V = val
'End Property
' номинальное линейное напряжение на двигателе
Public Property Get Unom_lin_V() As Double
    Unom_lin_V = p_nom_data.U_lin_V
End Property
'Public Property Let Unom_lin_V(val As Double)
'    p_Unom_lin_V = val
'End Property
' фактическое фазное напряжение на двигателе
Public Property Get U_phase_V() As Double
    U_phase_V = p_data.U_phase_V
End Property
'Public Property Let U_phase_V(val As Double)
'    p_U_phase_V = val
'End Property
' фактическое линейное напряжение на двигателе
Public Property Get U_lin_V() As Double
    U_lin_V = p_data.U_lin_V
End Property
'Public Property Let Ulin_V(val As Double)
'    p_U_lin_V = val
'End Property
' номинальный ток (фазный)
Public Property Get Inom_phase_A() As Double
  ' Inom_A = Pnom_W / Unom_lin_V / (3 ^ 0.5) / CosPhinom_d / Effnom_d
   Inom_phase_A = p_nom_data.I_phase_A
End Property
'Public Property Let Inom_phase_A(val As Double)
'    p_Inom_phase_A = val
'End Property
' номинальный ток (линейный)
Public Property Get Inom_lin_A() As Double
   Inom_lin_A = p_nom_data.I_lin_A
End Property
'Public Property Let Inom_lin_A(val As Double)
'    p_Inom_lin_A = val
'End Property
' номинальное скольжение на двигателе (при других номинальных параметрах)
Public Property Get Snom_d() As Double
    Snom_d = p_nom_data.S_d
End Property
'Public Property Let Snom_d(val As Double)
'    If val > 0 And val < 1 Then p_Snom_d = val
'End Property
' номинальная мощность двигателя при номинальной частоте тока
Public Property Get Pnom_W() As Double
    Pnom_W = p_nom_data.Pshaft_kW * 1000
End Property
Public Property Get Pnom_kW() As Double
    Pnom_kW = p_nom_data.Pshaft_kW
End Property
'Public Property Let Pnom_kW(val As Double)
'    If val > 0 Then p_Pnom_kW = val
'End Property
' потребляемая мощность электрическая двигателем
Public Property Get Pel_kW() As Double
     Pel_kW = p_data.Pelectr_kW
End Property
Public Property Get Pshaft_kW() As Double
     Pshaft_kW = p_data.Pshaft_kW
End Property
' загрузка двигателя при текущих параметрах работы
Public Property Get load_d() As Double
' определяется как оношение текущей мощности к номинальной
    load_d = p_data.load_d
End Property
' номинальный КПД двигателя
Public Property Get Effnom_d() As Double
    Effnom_d = p_nom_data.Eff_d
End Property
'Public Property Let Effnom_d(val As Double)
'    If val > 0 And val <= 1 Then
'        p_Effnom_d = val
'    End If
'End Property
' номинальный коэффициент мощности двигателя
Public Property Get CosPhinom_d() As Double
    CosPhinom_d = p_nom_data.Cosphi
End Property
'Public Property Let CosPhinom_d(val As Double)
'    If val > 0 And val <= 1 Then
'        p_CosPhinom = val
'    End If
'End Property
' номинальная скорость вращения поля статора
Public Property Get nnom_obmin() As Double
    nnom_obmin = Fnom_Hz * 60
End Property
' номинальная скорость вращения ротора с учетом проскальзования
Public Property Get nnoms_obmin() As Double
    nnoms_obmin = fnoms_Hz * 60 '* (1 - p_Snom_d)
End Property
Public Property Get Fnom_Hz() As Double
    Fnom_Hz = p_nom_data.f_Hz
End Property
Public Property Get fnoms_Hz() As Double
    fnoms_Hz = p_nom_data.f_Hz * (1 - p_nom_data.S_d)
End Property
'Public Property Let fnom_Hz(val As Double)
'    p_Fnom_Hz = val
'End Property
' фактическое проскальзование для текущего режима работы
Public Property Get S_d() As Double
    S_d = p_data.S_d
End Property
'Public Property Let S_d(val As Double)
'    p_S_d = val
''    Call calc_ADGridin(val)
'End Property
' частота вращения поля статора для двигателя. Равна частоте тока питающего двигатель
Public Property Get f_Hz() As Double
    f_Hz = p_data.f_Hz
End Property
'Public Property Let f_Hz(val As Double)
'    p_F0_Hz = val
'End Property
Public Property Get n_obmin() As Double
    n_obmin = f_Hz * 60
End Property
' частота вращения ротора с учетом проскальзования
Public Property Get fs_Hz() As Double
    fs_Hz = f_Hz * (1 - p_data.S_d)
End Property
' скорость вращения ротора с учетом проскальзования
Public Property Get ns_obmin() As Double
    ns_obmin = fs_Hz * 60
End Property
' синхронная угловая частота частота вращения при расчетном режиме
Public Property Get Omega_radsec() As Double
  Omega_radsec = f_Hz * (2 * const_Pi)   ' n_obmin / 9.55
End Property
' угловая частота вращения при расчетном режиме
Public Property Get Omegas_radsec() As Double
  Omegas_radsec = fs_Hz * (2 * const_Pi) ' n_obmin / 9.55 * (1 - p_S_d)
End Property
' номинальная частота вращения вала (с учетом проскальзования)
Public Property Get OmegaNoms_radsec() As Double
  OmegaNoms_radsec = fnoms_Hz * 2 * const_Pi ' nnoms_obmin / 9.55 * (1 - Snom_d)
End Property
' номинальная синхронная частота вращения вала
Public Property Get OmegaNom_radsec() As Double
  OmegaNom_radsec = Fnom_Hz * 2 * const_Pi ' nnoms_obmin / 9.55
End Property
' свойства схемы замещения
' параметры c коррекцией на реальные показатели работы
' индуктивное сопротивление обмоток для режима короткого замыкания, при неподвижном роторе
Public Property Get xk() As Double
' сразу корректируем индуктивность обмотки на частоту
    xk = p_xk * f_Hz / Fnom_Hz
End Property
' активное сопротивление обмотки статора
Public Property Get R1() As Double
    R1 = p_R1
End Property
' активное сопротивление обмотки ротора приведенное к обмотке статора
Public Property Get R2_() As Double
    R2_ = p_R2_
End Property
' расчет  тока холостого хода при произвольном напряжении и частоте
Public Property Get Ix_A() As Double
    Dim UUn_fnf As Double
    Dim Kn As Double
    UUn_fnf = U_phase_V / Unom_phase_V * Fnom_Hz / f_Hz
    Kn = 1.2786 * UUn_fnf - 0.2689   ' поправка по Гридину для учета намагничивающего тока
    Ix_A = Kn * p_Ix_A * UUn_fnf
    
End Property
Public Property Get cosPhix_d() As Double
    cosPhix_d = p_cosPhix_d
End Property
Public Property Get Phix_d() As Double
    Phix_d = p_Phix_d
End Property
' оценка момента на холостом ходу
Public Property Get M0_Nm() As Double
  M0_Nm = Mnom_Nm * (p_xi - 1)
End Property
' свойство выдает сумарную кривую по давлениям
Public Property Get PCurve() As TInterpolation
    Set PCurve = c_PCurve
End Property
Public Property Get TCurve() As TInterpolation
    Set TCurve = c_TCurve
End Property
' метод расчета момента в зависимости от скольжения
Public Property Get M_Nm() As Double
' Call calc_ADGridin(S_d)
 M_Nm = p_data.Mshaft_Nm
End Property
' расчет потребляемого тока в зависимости от скольжения
Public Property Get I_phase_A() As Double
    I_phase_A = p_data.I_phase_A
End Property
Public Property Get I_lin_A() As Double
    I_lin_A = p_data.I_lin_A
End Property
Public Property Get CosPhi_d() As Double
'    Call calc_ADGridin(s)
    CosPhi_d = p_data.Cosphi
End Property
Public Property Get Eff_d() As Double
'    Call calc_ADGridin(s)
    Eff_d = p_data.Eff_d
End Property
Public Sub InitMotor(Optional M_ID As Integer = 1, _
                     Optional Unomlin_V = 1000, _
                     Optional Inomlin_A = 10, _
                     Optional Fnom_Hz = 50)
    p_ID = M_ID
    If p_ID = 1 Then
        Call InitMotorDefault(Unomlin_V, Inomlin_A, Fnom_Hz, p_ID)
    ElseIf p_ID = 0 Then
        Call InitMotorGridin(Unomlin_V, Inomlin_A)
    Else
    End If
End Sub
Private Sub InitMotorGridin(Optional Unomlin_V = 1000, Optional Inomlin_A = 10, _
                           Optional Eff = 0.78, Optional Cosphi = 0.78, Optional f_Hz = 50, _
                           Optional s = 0.03, Optional lambda = 2, Optional Diam = 117)
' инициализация двигателя на основе схемы замещения по Гридину
Const root3 = 3 ^ 0.5
        
On Error GoTo er1:
        ID = 0
        p_nom_data.Pelectr_kW = root3 * Unomlin_V * Inomlin_A * Cosphi / 1000
        p_nom_data.Pshaft_kW = p_nom_data.Pelectr_kW * Eff
        p_MotorName = "ПЭД " & p_nom_data.Pshaft_kW & "-" & Diam & "-" & Unomlin_V
        p_ManufacturerName = "Induction_motor"
        p_nom_data.U_phase_V = Unomlin_V / root3
        p_nom_data.I_phase_A = Inomlin_A
        p_nom_data.U_lin_V = Unomlin_V
        p_nom_data.I_lin_A = Inomlin_A
        p_nom_data.Eff_d = Eff
        p_nom_data.Cosphi = Cosphi
        p_nom_data.f_Hz = f_Hz
        p_nom_data.S_d = s
        p_lambda_d = lambda
        p_minDcas_mm = Diam + 6
        p_nom_data.Mshaft_Nm = p_nom_data.Pshaft_kW * 1000 / (f_Hz * (1 - s) * 2 * const_Pi)
        p_nom_data.load_d = 1
                
        Call CalcModelGridin
        Exit Sub
er1:
     addLogMsg_debug "Не удалось инициализировать асинхронный двигатель"
End Sub
Private Sub InitMotorDefault(Unomlin_V, Inomlin_A, Fnom_Hz, _
                            Optional IDmotor = 1)
    ' инициализация дефолтного двигателя по паспортным характеристикам
    
    p_nom_data = set_motor_data_(100, Unomlin_V, Inomlin_A, Fnom_Hz)
    p_MotorName = "ПЭД " & Format(p_nom_data.Pshaft_kW, 0)
    ' проверяем - если дефолтный мотор тогда грузим что есть
    p_lambda_d = 5 ' перегрузочная способность - с потолка экспертно
    p_Istart_A = p_nom_data.I_lin_A * 5 ' пусковой ток тоже с потолка экспертно
    p_minDcas_mm = 120
    p_minVliq_msec = 0.06
    p_NumSections = 1
    p_Legth_m = 10
    p_M_kg = 300
    p_ManufacturerName = "Тестовый ПЭД"
    p_ID = IDmotor
End Sub
Public Sub Calc_motor_slip(s As Double, _
                      Optional freq_Hz As Double = 50, _
                      Optional Ulin_V As Double = 1000)
    Const root3 = 3 ^ 0.5
    p_data.U_lin_V = Ulin_V
    p_data.U_phase_V = Ulin_V / root3
    If ID = 0 Then
        Call calc_ADGridin(s, p_data.U_phase_V, freq_Hz)
        
    End If
End Sub
Public Sub Calc_motor(pow_mech_kW As Double, _
                      Optional freq_Hz As Double = 50, _
                      Optional Ulin_V As Double = 1000)
' расчет параметров двигателя при заданной мощности на валу
    Const root3 = 3 ^ 0.5
    Dim load As Double
    Dim s As Double, s1 As Double, s2 As Double
    Dim P1 As Double, P2 As Double
    Dim i As Integer
    i = 0
    ' оценим загрузку для заданной частоты
    load = pow_mech_kW / p_nom_data.Pshaft_kW * 100 * freq_Hz / p_nom_data.f_Hz
    p_data.U_lin_V = Ulin_V
    p_data.U_phase_V = Ulin_V / root3
    
    If ID = 0 Then
        s2 = p_nom_data.S_d * 2 ' макс граница
        P2 = p_nom_data.Pshaft_kW * 2
        s1 = 0
        P1 = 0
        ' дихотомией найдем значение проскальзывания
        ' до 8 итераций обычно надо
        ' можно и быстрее сделать, но потом
        Do
            s = (s1 + s2) / 2
            Call calc_ADGridin(s, p_data.U_phase_V, freq_Hz)
            If pow_mech_kW > p_data.Pshaft_kW Then
                s1 = s
            Else
                s2 = s
            End If
            i = i + 1
            
        Loop Until Abs(pow_mech_kW - p_data.Pshaft_kW) < 0.01 Or i > 15
       ' Debug.Print i
        If i >= 15 Then
            addLogMsg_debug "Ошибка при расчете мотора, расчет проскальзования по мощности не сошелся, i =", i
        End If
    Else
        p_data = set_motor_data_(load, p_nom_data.U_lin_V, p_nom_data.I_lin_A, freq_Hz, , Ulin_V)
    End If
End Sub
Sub Class_Initialize()
     ' проинициализируем параметры двигателя значениями по  умолчанию, чтобы с ходу можно было счиатать
'     p_Pnom_kW = 40     ' номиналная мощность двигателя
'
'     p_Unom_lin_V = 1050    ' номинальное напряжение работы двигателя
'     p_Inom_lin_A = 25       ' номинальный фазный ток, А
'     p_Fnom_Hz = 50        ' номинальная частота вращения  магнитного поля статора, Гц
'     p_Effnom_d = 0.83       ' номинальный КПД установки
'     p_CosPhinom = 0.84      ' номинальный косинус фи (коэф мощности)
'
'    ' p_Mnom_Nm         ' номинальный момент развиваемый двигателем Нм
'     p_Snom_d = 0.05         ' номинальное скольжение
'
'     p_lambda_d = 3    ' отношение максимального момента к номинальному для АД
'
'    ' p_Istart_A        ' пусковой ток для двигателя
'
'    ' параметры работы асинхронного двигателя рабочие
'     p_U_lin_V = 1050
'     p_F0_Hz = 50
'    ' p_I_A
'    ' p_S_d
'    ' p_CosPhi
'    ' p_Eff_d      ' КПД асинхронного двигателя
'
'    ' параметры холостого хода
'    ' p_Ix_A        ' ток холостого хода
'    ' p_cosPhix_d     ' коэф мощности при холостом ходе
 
End Sub
Public Property Get minDcas_mm() As Double
    minDcas_mm = p_minDcas_mm
End Property
'Public Property Let minDcas_mm(ByVal vNewValue As Double)
'   p_minDcas_mm = vNewValue
'End Property
Public Property Get minVliq_msec() As Double
   minVliq_msec = p_minVliq_msec
End Property
'Public Property Let minVliq_msec(ByVal vNewValue As Double)
'   p_minVliq_msec = vNewValue
'End Property
Public Property Get NumSections() As Integer
   NumSections = p_NumSections
End Property
'Public Property Let NumSections(ByVal vNewValue As Integer)
'   p_NumSections = vNewValue
'End Property
 ' глубина установки  (верхняя точка)
 Public Property Get HmesTop_m() As Double
    HmesTop_m = p_HmesTop
 End Property
 
 Public Property Let HmesTop_m(val As Double)
    p_HmesTop = val
 End Property
 ' глубина нижней точки установки
 Public Property Get HmesDown_m() As Double
    HmesDown_m = HmesTop_m + Length_m
 End Property
Public Property Get Length_m() As Double
   Length_m = p_Legth_m
End Property
'Public Property Let Length_m(ByVal vNewValue As Double)
'   Length_m = vNewValue
'End Property
Public Property Get M_kg() As Double
   M_kg = p_M_kg
End Property
'Public Property Let M_kg(ByVal vNewValue As Double)
'   p_M_kg = vNewValue
'End Property
Public Property Get ID() As Integer
   ID = p_ID
End Property
Public Property Let ID(ByVal vNewValue As Integer)
   p_ID = vNewValue
End Property
Public Property Get MotorName() As String
    MotorName = p_MotorName
End Property
'Public Property Let MotorName(val As String)
'    p_MotorName = val
'End Property
Public Property Get ManufacturerName() As String
    ManufacturerName = p_ManufacturerName
End Property
'Public Property Let ManufacturerName(val As String)
'    p_ManufacturerName = val
'End Property
'Property Get PowerMotor_Wt() As Double
'    PowerMotor_Wt = p_PowerMotor_Wt
'End Property
Private Function set_motor_data_(load, _
                                Unm, Inm, Optional fnm = 50, _
                                Optional freal As Double = -1, Optional U As Double = 0) As MOTOR_DATA
    ' расчет параметров ПЭД по паспортным характеристикам
    ' load - загрузка на заданной частоте
    ' Unm, Inm, fnm - номинальные показатели, определяющие характеристики двигателя
    '
    ' freal, U - рабочие показатели, которые могут внести поправки на характеристики
    
    Const root3 = 3 ^ 0.5
        ' для расчета всех параметров дефолтного насоса можно использовать характеристики насоса
        Dim d As MOTOR_DATA
        ' correction factors depends on U/Unm
        Dim Eff_cf As Double
        Dim I_cf As Double
        Dim cosphi_cf As Double
        Dim S_cf As Double
        Dim Uf As Double    ' отличие рабочего напряжения от номинального
        Dim Ff As Double    ' отличие рабочей частоты от номинальной
        
        If freal = -1 Then
            Ff = 1
        Else
            Ff = freal / fnm
        End If
        
        d.f_Hz = fnm * Ff
        
        If U = 0 Then
            d.U_lin_V = Unm * (Ff)   ' предполагаем, что при частотном регулировании момент сохранятся U/f = const
            Uf = 100
        Else
            d.U_lin_V = U
            Uf = U / Unm * 100
        End If
        d.U_phase_V = d.U_lin_V / root3
        ' напряжение оценили - возможно надо сделать поправку на напряжение
        
        ' поправочные параметры, рассчитаны на основе рисунка 3.14 из книги Takacs Gabor: ESP Manual
        If Uf = 100 Then
            ' чтобы устранить отличия от 1 поправок присвоем точные значения
            Eff_cf = 1
            I_cf = 1
            cosphi_cf = 1
            S_cf = 1
        Else
            Eff_cf = -0.00010442 * (Uf) ^ 2 + 0.020574732 * (Uf) - 0.013269505
            I_cf = (0.0000333333 * (Uf) ^ 4 - 0.013577778 * (Uf) ^ 3 + 2.093833333 * (Uf) ^ 2 - 144.8529365 * (Uf) + 3891.666667) / 100
            cosphi_cf = (0.0000000731957 * (Uf) ^ 4 - 0.0000262041 * (Uf) ^ 3 + 0.00332089 * (Uf) ^ 2 - 0.179141048 * (Uf) + 4.589348453)
            S_cf = (0.00000204082 * (Uf) ^ 3 - 0.0007138 * (Uf) ^ 2 + 0.084499514 * (Uf) - 2.353571429)
        End If
        d.Eff_d = motor_eff_default_d(load, d.f_Hz) * Eff_cf
        d.Cosphi = motor_cosphi_default_d(load, d.f_Hz) * cosphi_cf
        d.S_d = (1 - motor_rot_speed_default_rmp(load, d.f_Hz) / (d.f_Hz * 60)) / S_cf
        d.I_phase_A = motor_current_default_d(load, d.f_Hz) * Inm * I_cf
        d.I_lin_A = d.I_phase_A
        ' оценим мощность на валу с учетом скольжения и частоты
        d.Pelectr_kW = root3 * d.U_lin_V * d.I_lin_A * d.Cosphi / 1000 '* (freal / fnm)
        d.Pshaft_kW = d.Pelectr_kW * d.Eff_d
        d.Mshaft_Nm = d.Pshaft_kW * 1000 / (d.f_Hz * (1 - d.S_d) * 2 * const_Pi)
        d.load_d = load
        set_motor_data_ = d
End Function
Private Function motor_rot_speed_default_rmp(load, Optional freq_Hz = 50, Optional motID = 0)
' вывод параметров стандартного двигателя
' обороты -2.07391E-09    5.66468E-07 -4.70742E-05    -0.004462241    -1.526740367    3012.664336
    Dim l As Double
    Dim spd As Double
    If load >= 0 Or load < 150 Then
        l = load
        spd = -0.00000000207391 * l ^ 5 + 0.000000566468 * l ^ 4 - 0.0000470742 * l ^ 3 - 0.004462241 * l ^ 2 - 1.526740367 * l + 3012.664336
        motor_rot_speed_default_rmp = spd + (freq_Hz * 60 - 3000)
    Else
        motor_rot_speed_default_rmp = 0
    End If
End Function
Private Function motor_current_default_d(load, Optional freq_Hz = 50, Optional motID = 0)
' вывод параметров стандартного двигателя
'ток 6.03318E-10 -3.73389E-07    5.7149E-05  0.000128248 0.362600747 36.76223776
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_current_default_d = 0.000000000603318 * l ^ 5 - 0.000000373389 * l ^ 4 + 0.000057149 * l ^ 3 + 0.000128248 * l ^ 2 + 0.362600747 * l + 36.76223776
        motor_current_default_d = motor_current_default_d / 100
    Else
        motor_current_default_d = 0
    End If
End Function
Private Function motor_cosphi_default_d(load, Optional freq_Hz = 50, Optional motID = 0)
' вывод параметров стандартного двигателя
'коэф мощ    -5.46757E-10    -1.08923E-07    0.000123969 -0.026538059    2.410930241 0.394405594
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_cosphi_default_d = -0.000000000546757 * l ^ 5 - 0.000000108923 * l ^ 4 + _
                                    0.000123969 * l ^ 3 - 0.026538059 * l ^ 2 + 2.410930241 * l + 0.394405594
        motor_cosphi_default_d = motor_cosphi_default_d / 100
        
    Else
        motor_cosphi_default_d = 0
    End If
End Function
Private Function motor_eff_default_d(load, Optional freq_Hz = 50, Optional motID = 0)
' вывод параметров стандартного двигателя
'КПД 1.0313E-08  -4.9338E-06 0.000914116 -0.083174452    3.73047825  16.13321678
    Dim l As Double
    If load >= 0 Or load < 150 Then
        l = load
        motor_eff_default_d = 0.000000010313 * l ^ 5 - 0.0000049338 * l ^ 4 + _
                              0.000914116 * l ^ 3 - 0.083174452 * l ^ 2 + 3.73047825 * l + 16.13321678
        motor_eff_default_d = motor_eff_default_d / 100
    Else
        motor_eff_default_d = 0
    End If
End Function
' ====== расчет по Гридину по П образной схеме замещения
' расчет текущих параметров работы двигателя при заданных частоте и напряжении и при вращении
Public Sub calc_ADGridin(s As Double, Uph_V As Double, Fw_Hz)
     Dim R2_s As Double
     Dim I2_ As Double
     Dim phi2 As Double
     
     p_data.S_d = s     ' сохраняем скольжение
     p_data.f_Hz = Fw_Hz
     R2_s = p_R2_ / s     ' вычисляем вспомогательный параметр - активное сопротивление обмотки ротора деленное на скольжение
     p_data.U_phase_V = Uph_V
     p_data.U_lin_V = Uph_V * 3 ^ 0.5
     p_data.Mshaft_Nm = 3 * Uph_V ^ 2 * R2_s / (Fw_Hz * (2 * const_Pi) * ((p_R1 + R2_s) ^ 2 + xk ^ 2)) - M0_Nm
     I2_ = Uph_V / ((R1 + R2_s) ^ 2 + xk ^ 2) ^ 0.5
     phi2 = Atn(xk / (R1 + R2_s))
     p_data.I_phase_A = (Ix_A ^ 2 + I2_ ^ 2 + 2 * Ix_A * I2_ * Cos(Phix_d - phi2)) ^ 0.5
     p_data.I_lin_A = p_data.I_phase_A
     p_data.Cosphi = (Ix_A * Cos(p_Phix_d) + I2_ * Cos(phi2)) / p_data.I_phase_A
     p_data.Pelectr_kW = 3 * U_phase_V * p_data.I_phase_A * p_data.Cosphi / 1000
     p_data.Pshaft_kW = p_data.Mshaft_Nm * Fw_Hz * (2 * const_Pi) / 1000
     p_data.Eff_d = p_data.Pshaft_kW / p_data.Pelectr_kW
   
End Sub
' процедура расчета скольжения по заданному моменту на валу двигателя
Public Function calc_s_d(M_Nm As Double, Uphase_V As Double, f_Hz) As Double
    Dim Rs As Double
    Dim s As Double
    
    Rs = 3 * (Uphase_V ^ 2) / (2 * (M_Nm + M0_Nm) * f_Hz * 2 * const_Pi) - R1
    s = R2_ / (Rs + (Rs ^ 2 - (R1 ^ 2 + xk ^ 2)) ^ 0.5)
    Call calc_ADGridin(s, Uphase_V, f_Hz)
    calc_s_d = s
End Function
' процедура расчета параметров схемы замещения по Гридину
Public Sub CalcModelGridin()
    ' при расчете модели идет расчет на номинальной частоте вращения и номинальном напряжении
     
     Dim alpha0 As Double
     Dim a As Double
     Dim b As Double
     Dim Rm As Double
     Dim G As Double
     Dim P1n_W As Double  ' потребляемая мощность двигателя
     Dim I1n_A As Double  ' фазный ток
     Dim I2n__A As Double
     Dim phinom As Double
     Dim phi2n As Double
     Dim R2s_ As Double
     alpha0 = 0.44  ' константа рекомендованная в методичке Гридина
     p_xi = 1.05
     With p_nom_data
        ' расчитываем показатели схемы замещения. Сначала вспомогательные переменные
        a = alpha0 / p_xi * (1 - Effnom_d) / Effnom_d * (1 - Snom_d) / Snom_d - 1
        Rm = 3 * .U_phase_V ^ 2 * (1 - .S_d) / (2 * .Pshaft_kW * 1000 * (p_lambda_d + p_xi - 1))
        G = 1 / .S_d ^ 2 + 2 * a / .S_d + a ^ 2
        b = (p_lambda_d + p_xi - 1) / p_xi
        ' далее считаем сопротивления статора и ротора и индуктивность
        p_R2_ = Rm / G * (b / .S_d + a + ((b / .S_d + a) ^ 2 - G) ^ 0.5)
        R2s_ = p_R2_ / .S_d
        p_R1 = a * p_R2_ '* 2
        p_xk = (Rm ^ 2 - 2 * Rm * p_R1) ^ 0.5
        ' теперь считаем показатели холостого хода при номинальной частоте вращения
        P1n_W = .Pshaft_kW * 1000 / .Eff_d
        I1n_A = P1n_W / (3 * .U_phase_V * .Cosphi)    ' оценили номинальный ток, хотя он может быть и задан
        ' найдем ток в обмотке ротока приведенный к обмотке статора
        I2n__A = .U_phase_V / ((p_R1 + R2s_) ^ 2 + p_xk ^ 2) ^ 0.5
        phinom = ArcCos(.Cosphi)
        phi2n = ArcTan(p_xk / (p_R1 + R2s_))  ' * 3
        p_Ix_A = (I1n_A ^ 2 + I2n__A ^ 2 - 2 * I1n_A * I2n__A * Cos(phinom - phi2n)) ^ 0.5
        p_cosPhix_d = (I1n_A * .Cosphi - I2n__A * Cos(phi2n)) / p_Ix_A
        p_Phix_d = ArcCos(p_cosPhix_d)
    End With
     
End Sub
