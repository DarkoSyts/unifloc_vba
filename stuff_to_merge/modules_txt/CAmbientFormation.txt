'=======================================================================================
'Unifloc 7.6  Vulpes zerda                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'
Option Explicit
' класс для описания свойств пород окружающих скважину на всем протяжении скважины
' задает геотермальный градиент в скважине  (в том числе с учетом зависимости от глубины и например наличия вечной мерзлоты)
' позволяет рассчитать общие коэффициент теплопроводности для различных условий
' необходим для корректного расчета распределения температуры в скважине
'
'
' пока положим эти параметры не зависящими от глубины, хотя потом можно будет поменять
Private p_Ke_JsecmC As Double      ' теплопроводность породы Дж/сек/м/С
Private p_Ce_JkgC As Double        ' теплоемкость породы
Private p_Rhoe_kgm3 As Double       ' плотность породы вокруг скважины
' termal conductivity теплопроводность
Private p_Kcem_JsecmC  As Double          ' теплопроводность цемента вокруг скважины
Private p_Ktub_JsecmC  As Double          ' теплопроводность металла НКТ
Private p_Kcas_JsecmC  As Double          ' теплопроводность металла эксплуатационной колонны
' convective heat transfer coeficients
Private p_Hc_Jm2secC As Double       ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
Private p_Hr_Jm2secC As Double       ' теплопередача через затруб с газом (радиационная)
Private p_Hf_Jm2secC As Double       ' теплопередача конвективная в потоке жидкости
' радиусы для проведения расчета по температуре
' хотя это больше относится к конструкции скважины, но тут удобнее это разместить, тем более что значительного влияния на расчет нет
' в перспективе можно будет перевести в массивы и формировать снаружи
Private p_rti_m As Double           ' НКТ внутренний
Private p_rto_m As Double           ' НКТ наружный
Private p_rci_m As Double           ' Эксп колонна внутренний
Private p_rco_m As Double           ' Эксп колонна наружный
Private p_rcem_m As Double          ' Радиус цементного кольца вокруг скважины
Private p_td_hr As Double               ' время на которое вычисляется распределение давления
Private p_td_d As Double                ' безразмерное время расчета
Private p_TD As Double                  ' безразмерное температура
Private c_AmbTempCurve As TInterpolation
Public HvertData_m As Double
Public AmbTempData_C As Double
Public Hdyn_m As Double
Public Hpump_m As Double
Private p_TGeoGrad_C100m As Double
 ' блок оценки качества данных
 'Public' LogMsg As New CLogger                ' логгер
' градиент давления от температуры
Public Function AmbTempGrad_Cm(Hvert_m As Double) As Double
 If c_AmbTempCurve Is Nothing Then
     AmbTempGrad_Cm = p_TGeoGrad_C100m / 100
 Else
     AmbTempGrad_Cm = (c_AmbTempCurve.GetPoint(Hvert_m + 1) - c_AmbTempCurve.GetPoint(Hvert_m)) / 1
 End If
End Function
Public Property Get AmbTempCurve() As TInterpolation
    Set AmbTempCurve = c_AmbTempCurve
    
End Property
Public Property Set AmbTempCurve(crv As TInterpolation)
    Set c_AmbTempCurve = crv
    
End Property
' температура на глубине
Public Function AmbTemp_С(Hvert_m As Double) As Double
 If c_AmbTempCurve Is Nothing Then
     AmbTemp_С = AmbTempData_C + (Hvert_m - HvertData_m) * AmbTempGrad_Cm(Hvert_m)
 Else
     AmbTemp_С = c_AmbTempCurve.GetPoint(Hvert_m)
 End If
End Function
Public Function Uto_Jm2secC(Hvert_m As Double) As Double
End Function
Private Sub Class_Initialize()
     p_Ke_JsecmC = 2.4252    ' теплопроводность породы Дж/сек/м/С
     p_Ce_JkgC = 200        ' теплоемкость породы
     p_Rhoe_kgm3 = 4000       ' плотность породы вокруг скважины
     
     p_Kcem_JsecmC = 6.965   ' теплопроводность цемента вокруг скважины
     p_Ktub_JsecmC = 32          ' теплопроводность металла НКТ
     p_Kcas_JsecmC = 32          ' теплопроводность металла эксплуатационной колонны
    ' convective heat transfer coeficients
     p_Hc_Jm2secC = 200       ' конвективная теплопередача через затруб с жидкостью  Дж/м2/сек/С
     p_Hr_Jm2secC = 10        ' теплопередача через затруб с газом (радиационная)
     p_Hf_Jm2secC = 200       ' теплопередача конвективная в потоке жидкости
     ' радиусы для проведения расчета
     p_rti_m = 0.06           ' НКТ внутренний
     p_rto_m = p_rti_m + 0.01 ' НКТ наружный
     p_rci_m = 0.124          ' Эксп колонна внутренний
     p_rco_m = p_rci_m + 0.01 ' Эксп колонна наружный
     p_rcem_m = 0.3           ' Радиус цементного кольца вокруг скважины
    
     ' исходные данные по умолчанию, чтобы все считало
     HvertData_m = 2500
     AmbTempData_C = 95
     p_td_hr = 10 * 24   ' задаем по умолчанию время расчета распределения температуры через 10 дней
     Hdyn_m = -1
     Hpump_m = -1
     
     p_TGeoGrad_C100m = const_TGeoGrad_C100m
     
     Set c_AmbTempCurve = Nothing
End Sub
 Public Property Get td_d() As Double
   
        p_td_d = Ke_JsecmC * p_td_hr * const_convert_hr_sec / Rhoe_kgm3 / Ce_JkgC / (rwb_m ^ 2)
        td_d = p_td_d
    
 End Property
 Public Property Get TD() As Double
    TD = Log(Exp(-0.2 * td_d) + (1.5 - 0.3719 * Exp(-td_d)) * (td_d ^ 0.5))
 End Property
 Public Function Lr_1m(wt_kgsec As Double, Uto_Jm2secC As Double, Cp_JkgC As Double) As Double
    If wt_kgsec <> 0 Then
        Lr_1m = 2 * const_Pi / (Cp_JkgC * wt_kgsec) * (Uto_Jm2secC * Ke_JsecmC / (Ke_JsecmC + Uto_Jm2secC * TD))
    Else
        Lr_1m = 10000
    End If
 End Function
 
' 'расчет перепада температуры для  заданных параметров
' Function Calc_Tf_C(Hmes1_m As Double, Hmes2_m As Double, sinTheta_deg As Double, T1_C As Double, _
'                    W_kgsec As Double, Cp_JkgC As Double)
'    Dim Lr As Double
'    Dim Uto As Double
'    Dim h As Double
'    h = Hmes2_m ' (Hmes1_m + Hmes2_m) / 2
'
'    ' если потока нет, то берем температуру извне
'    If W_kgsec = 0 Then
'        Calc_Tf_C = AmbTemp_С(Hmes2_m)
'        Exit Function
'    End If
'
'    If Hmes1_m > Hpump_m Then
'            Uto = Uto_cas_Jm2secC
'    ElseIf Hmes1_m > Hdyn_m Then
'            Uto = Uto_tub_liqcas_Jm2secC
'    Else
'            Uto = Uto_tub_gascas_Jm2secC
'    End If
'
'    Lr = Lr_1m(W_kgsec, Uto, Cp_JkgC)
'
'
'    Calc_Tf_C = AmbTemp_С(Hmes1_m) + _
'                (1 - Exp((Hmes1_m - Hmes2_m) * Lr)) / Lr * _
'                (AmbTempGrad_Cm(h) * sinTheta_deg - const_g * sinTheta_deg / Cp_JkgC) + _
'                Exp((Hmes1_m - Hmes2_m) * Lr) * (T1_C - AmbTemp_С(Hmes2_m))  ' пока так
'
'   ' надо будет еще тут Джоуля Томсона поправку добавить
'
' End Function
 
 ' функция расчета градиента температуры
 Function Calc_dTdL_Cm(Hvert_m As Double, _
                        sinTheta_deg As Double, _
                        T1_C As Double, _
                        W_kgsec As Double, _
                        Cp_JkgC As Double, _
                        Optional dPdL_atmm As Double = 0, _
                        Optional v_ms As Double = 0, _
                        Optional dvdL_msm As Double = 0, _
                        Optional Cj_Catm As Double = 0, _
                        Optional flowUp As Boolean = True)
 '
 ' Hvert_m -  vertical depth where calculation take place
 ' sinTheta_deg - angle sin
 ' T1_C - fluid temp at depth gien
 ' W_kgsec - mass rate of fluid
 ' Cp_JkgC - heat capasity
 ' dPdL_atmm - pressure gradient at depth given (needed to account Joule Tompson effect)
 ' v_ms - velocity of fluid mixture
 ' dvdL_msm - acceleration of fluid mixture. acount inetria force influence (should be small but ..)
 ' Cj_Catm - коэффициент Джоуля Томсона Joule Thomson coeficient
 ' flowUp - flow direction
 
 
    
    Dim Lr As Double
    Dim Uto As Double
    Dim H As Double
    Dim sign As Integer
    
    ' если потока нет, то берем температуру извне
    ' if mass flow rate is zero - take ambient temp gradient
    If W_kgsec = 0 Then
        Calc_dTdL_Cm = AmbTempGrad_Cm(Hvert_m)
        Exit Function
    End If
    
    ' set Uto - temperature emission depents on well condition
    If Hvert_m > Hpump_m Then
            Uto = Uto_cas_Jm2secC
    ElseIf Hvert_m > Hdyn_m Then
            Uto = Uto_tub_liqcas_Jm2secC
    Else
            Uto = Uto_tub_gascas_Jm2secC
    End If
    
    If flowUp Then
        sign = 1
    Else
        sign = -1
    End If
    
    Lr = Lr_1m(W_kgsec, Uto, Cp_JkgC)
    Calc_dTdL_Cm = sign * (T1_C - AmbTemp_С(Hvert_m)) * Lr
    Calc_dTdL_Cm = Calc_dTdL_Cm - (const_g * sinTheta_deg / Cp_JkgC + v_ms / Cp_JkgC * dvdL_msm - Cj_Catm * dPdL_atmm)
   
 End Function
 Public Property Get Ke_JsecmC() As Double
    Ke_JsecmC = p_Ke_JsecmC
 End Property
 Public Property Get Ce_JkgC() As Double       ' теплоемкость породы
     Ce_JkgC = p_Ce_JkgC
 End Property
 Public Property Get Rhoe_kgm3() As Double
    Rhoe_kgm3 = p_Rhoe_kgm3
 End Property
 Public Property Get Kcem_JsecmC() As Double
    Kcem_JsecmC = p_Kcem_JsecmC
 End Property
 
 Public Property Get Kcas_JsecmC() As Double
    Kcas_JsecmC = p_Kcas_JsecmC
 End Property
 
 Public Property Get Ktub_JsecmC() As Double
    Ktub_JsecmC = p_Ktub_JsecmC
 End Property
 
 Public Property Get Hf_Jm2secC() As Double
    Hf_Jm2secC = p_Hf_Jm2secC
 End Property
 Public Property Get Hr_Jm2secC() As Double
    Hr_Jm2secC = p_Hr_Jm2secC
 End Property
 Public Property Get Hc_Jm2secC() As Double
    Hc_Jm2secC = p_Hc_Jm2secC
 End Property
 Public Property Get rti_m() As Double
    rti_m = p_rti_m
 End Property
 
 Public Property Get rto_m() As Double
    rto_m = p_rto_m
 End Property
 Public Property Get rci_m() As Double
    rci_m = p_rci_m
 End Property
 Public Property Get rco_m() As Double
    rco_m = p_rco_m
 End Property
 Public Property Get rwb_m() As Double
    rwb_m = p_rcem_m
 End Property
 Public Property Get Uto_cas_Jm2secC() As Double
    
    Uto_cas_Jm2secC = 1 / ( _
                                 Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                 Log(rco_m / rci_m) / Kcas_JsecmC + _
                                 1 / rci_m / Hf_Jm2secC _
                            )
    
 End Property
 
 Public Property Get Uto_tub_liqcas_Jm2secC() As Double
    
    Uto_tub_liqcas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                1 * Log(rco_m / rci_m) / Kcas_JsecmC + _
                                1 / rto_m / (Hr_Jm2secC + Hc_Jm2secC) + _
                                1 * Log(rto_m / rti_m) / Ktub_JsecmC + _
                                1 / rti_m / Hf_Jm2secC _
                            )
    
 End Property
  Public Property Get Uto_tub_gascas_Jm2secC() As Double
    
    Uto_tub_gascas_Jm2secC = 1 / ( _
                                1 * Log(rwb_m / rco_m) / Kcem_JsecmC + _
                                1 * Log(rco_m / rci_m) / Kcas_JsecmC + _
                                1 / rto_m / (Hr_Jm2secC) + _
                                1 * Log(rto_m / rti_m) / Ktub_JsecmC + _
                                1 / rti_m / Hf_Jm2secC _
                            )
    
 End Property
