''=======================================================================================
''Unifloc 7.9  Vulpes zerda                                           khabibullin.ra@gubkin.ru
''Petroleum engineering calculations modules (macroses)
''2000 - 2019
''
''=======================================================================================
'' математические расчеты
''
''
''
''
'
'
Option Explicit
Function cosd(ang) As Double
 cosd = Cos(ang / 180 * const_Pi)
End Function
Function sind(ang) As Double
 sind = Sin(ang / 180 * const_Pi)
End Function
Public Function isEqual(a As Double, b As Double) As Double
    Const EPS = const_P_difference
    isEqual = False
    If Abs(a - b) < EPS Then isEqual = True
End Function
Public Function isGreater(a As Double, b As Double) As Double
    Const EPS = const_P_difference
    isGreater = False
    If (a - b) > EPS Then isGreater = True
End Function
Public Function isBetween(a As Double, a0 As Double, A1 As Double)
    isBetween = False
    If ((a <= a0) And (a >= A1)) Or ((a >= a0) And (a <= A1)) Then isBetween = True
End Function
' функция решения ОДУ методом Кэш Карпа (Cash-Karp adaptive ODE solver)
' Решается ОДУ вида  Y'=f(Y,x)  с начальными устьвиями Y(xs)=Ys
' Y или одна переменная или вектор размерности N.
Public Function solve_ode(ByVal func_name As String, _
                          Y0() As Double, _
                          XA() As Double, _
                          coeffA As Variant, _
                 Optional EPS As Double = 0.000001, _
                 Optional Step As Double = 10, _
                 Optional MaxIts As Long = 1000)
' func_name         - имя функции  f(x)
' Y0                - начальное значение для расчета
' XA                - значения аргумента для которых ищем решение
' CoeffA            - дополнительные параметры функции градиента
' Eps
' Step
' MaxIts
    Dim M As Long, N As Long, State As ODESolverState, _
    YA() As Double, i As Long, _
    Rtn As Boolean, Rep As ODESolverReport
    Dim r() As Double
  
    N = UBound(Y0) + 1
    M = UBound(XA) + 1
    'Set up any required output arrays
    ReDim YA(0 To M - 1, 0 To N - 1)
    
    'Call the appropriate AlgLib routine to initialise the State object
    Call ODESolverRKCK(Y0(), N, XA, M, EPS, Step, State)
    
    ' Loop through the AlgLib solver routine and the external ODE
    ' evaluation routine until the solver routine returns "False",
    ' which indicates that it has finished.
    ' The VBA function named in "func_name" is called using
    ' the Application.Run method.
    Rtn = True
    i = 0
    Do While Rtn = True And i < MaxIts
        Rtn = ODESolverIteration(State)
        r = Application.Run(func_name, State.X, State.Y, coeffA(0))
        State.DY(0) = r(0)
        i = i + 1
    Loop
    
     ' Extract the desired results from the State
     ' object using the appropriate AlgLib routine
     Call ODESolverResults(State, M, XA, YA, Rep)
    
    ' If necessary convert the AlgLib output array(s) to
    ' a form suitable for Excel.  In this case YA2 is
    ' a 2D base 0 array, which may be assigned to the
    ' function return value without further processing.
    
    ' Assign the output array to the function return value
     solve_ode = YA
End Function
' функция ищет корни уравнения вида
' f(x) = 0 на отрезке [x1..x2]
Public Function solve_equation_bisection(func_name As String, _
                                         ByVal X1 As Double, _
                                         ByVal X2 As Double, _
                                         coeffA, _
                                         prm As CSolveParam) As Boolean
' func_name             - название функции для которой ищем решение
' x1                    - левая граница аргумента для поиска решения
' x2                    - правая граница аргумента для поиска решения
' coeffA                - параметры функции для которой ищем решение
' prm                   - объект с настройками поиска решения
'                         через этот же объект возвращаются решение и его параметры
    Dim y1 As Double
    Dim y2 As Double
    Dim y_temp As Double
    Dim x_temp As Double
    Dim i As Long
    i = 0
    
    ' определим значения параметров на границе
    y1 = Application.Run(func_name, X1, coeffA)
    y2 = Application.Run(func_name, X2, coeffA)
    With prm
        If y1 * y2 > 0 Then
            ' если значения на границе одного знака - то метод поиска решения не работает
            ' возможно решения нет и найти его не получится
            .iterations = 0
            .found_solution = False
            .msg = "solve_equation_bisection: Значения на концах отрезка должны иметь разный знак"
            solve_equation_bisection = False
            Exit Function
        End If
        ' начинаем цикл поиска решений (итерации)
        Do
            i = i + 1
            ' делим отрезок пополам
            x_temp = (X1 + X2) / 2
            y_temp = Application.Run(func_name, x_temp, coeffA)
            If Abs(y_temp) < .y_tolerance Then
                solve_equation_bisection = True
                .x_solution = x_temp
                .y_solution = y_temp
                .iterations = i
                .found_solution = True
                .msg = "solve_equation_bisection: решение найденою итераций " + CStr(i) + ", точность " + CStr(.y_tolerance)
                Exit Function
            Else
                If y_temp * y1 > 0 Then
                    X1 = x_temp
                    y1 = y_temp
                Else
                    X2 = x_temp
                    y2 = y_temp
                End If
            End If
        Loop Until i >= 100
        
        solve_equation_bisection = False
        .x_solution = x_temp
        .y_solution = y_temp
        .iterations = i
        .found_solution = False
        .msg = "solve_equation_bisection: Превышено количество итераций " + CStr(i)
    End With
    
End Function
'
' Non-linear least squares fit for function evaluated by VBA routine
' нелинейная регрессия МНК для VBA функции
'
'
Function AL_NLFit(func As String, _
                  Y_Range As Variant, _
                  X_Range As Variant, _
                  coeffA As Variant, _
         Optional TolA As Variant, _
         Optional WeightA As Variant, _
         Optional CheapFG As Boolean = False, _
         Optional UseHess As Boolean = False) As Variant
' func      - имя функции VBA для которой делается мачинг
' Y_Range   - значение функции под который надо делать подстройку
' X_Range   - значения аргументов от которых зависит функция
' CoeffA    - параметры VBA функции
' TolA
'
'
                  
    Dim c() As Double, N As Long, M As Long, k As Long, State As LSFitState, WeightAD() As Double, UseWeights As Boolean
    Dim Slopea As Variant, RtnState As Boolean, ResA() As Double, NumWeights As Long, NumWCols As Long
    Dim XAD() As Double, YAD() As Double, CAD() As Double, Rtn As Long, NLoops As Long
    Dim i As Long, Info As Long, Rep As LSFitReport
    Dim EpsF As Double, EpsX As Double, MaxIts As Long
    If IsMissing(TolA) = False Then
        GetArray TolA
        EpsF = TolA(1, 1)
        EpsX = TolA(2, 1)
        MaxIts = TolA(3, 1)
    Else
        EpsF = 0
        EpsX = 0.000000001
        MaxIts = 1000
    End If
    Rtn = GetNLFitData(X_Range, Y_Range, coeffA, XAD, YAD, CAD, N, M, k)
    ReDim ResA(1 To k + 4)
    If IsMissing(WeightA) = False Then
        GetArray WeightA
        NumWeights = UBound(WeightA)
        NumWCols = UBound(WeightA, 2)
        ReDim WeightAD(0 To NumWeights - 1)
        Call Array120D(WeightA, WeightAD, NumWeights, NumWCols)
        UseWeights = True
    End If
    If UseWeights = True Then
        If UseHess = True Then
            Call LSFitNonlinearWFGH(XAD, YAD, WeightAD, CAD, N, M, k, State)
        Else
            Call LSFitNonlinearWFG(XAD, YAD, WeightAD, CAD, N, M, k, CheapFG, State)
        End If
    Else
        If UseHess = True Then
            Call LSFitNonlinearFGH(XAD, YAD, CAD, N, M, k, State)
        Else
            Call LSFitNonlinearFG(XAD, YAD, CAD, N, M, k, CheapFG, State)
        End If
    End If
    Call LSFitNonlinearSetCond(State, EpsF, EpsX, MaxIts)
    Do While LSFitNonlinearIteration(State) = True
        NLoops = NLoops + 1
        State.F = Application.Run(func, State.X, State.c, 1)
        If State.NeedFG = True Then
            State.G = Application.Run(func, State.X, State.c, 2)
        End If
        If State.NeedFGH = True Then
            State.H = Application.Run(func, State.X, State.c, 3)
        End If
    Loop
    Call LSFitNonlinearResults(State, Info, c, Rep)
    For i = 1 To k
        ResA(i) = c(i - 1)
    Next i
    ResA(k + 1) = Rep.RMSError
    ResA(k + 2) = Rep.MaxError
    ResA(k + 3) = NLoops
    ResA(k + 4) = Info
    AL_NLFit = ResA
End Function
' подготовка данных для нелинейное регрессии
'
Private Function GetNLFitData(XA As Variant, _
                              YA As Variant, _
                              CA As Variant, _
                              XAD() As Double, _
                              YAD() As Double, _
                              CAD() As Double, _
                              N As Long, _
                              M As Long, _
                              k As Long, _
                              Optional CAT As Variant) As Variant
' XA input vector for arguments (N x M)
'    N is a number of points,
'    M is a dimension of a space points belong to,
'    K is a dimension of a space of parameters being fitted,
    Dim NumYRows As Long, i As Long, j As Long, CATD As Variant
    ' если на входе range - переводим их в массивы
    If TypeName(XA) = "Range" Then XA = XA.Value2
    If TypeName(YA) = "Range" Then YA = YA.Value2
    If TypeName(CA) = "Range" Then CA = CA.Value2
    N = UBound(XA)
    M = UBound(XA, 2)
    k = UBound(CA)
    If UBound(CA, 2) = 2 Then
        k = k - M
        ReDim CAT(0 To k + M - 1)
    End If
    ReDim XAD(0 To N - 1, 0 To M - 1)
    ReDim YAD(0 To N - 1)
    ReDim CAD(0 To k - 1)
    For i = 1 To N
        YAD(i - 1) = YA(i, 1)
    Next i
    For i = 1 To N
        For j = 1 To M
            XAD(i - 1, j - 1) = XA(i, j)
        Next j
    Next i
    If UBound(CA, 2) = 1 Then
        For i = 1 To k
            CAD(i - 1) = CA(i, 1)
        Next i
    Else
        For i = 1 To k
            CAT(i - 1) = CA(i, 1)
            CAD(i - 1) = CA(i, 2)
        Next i
        For i = k + 1 To k + M
            CAT(i - 1) = CA(i, 1)
        Next i
    End If
End Function
Function GradientA(func As Variant, Pvaluea0() As Double, _
                   XvalueA0() As Double, NumP As Long, NumX As Long, Optional dP As Double = 0.000001) As Variant
    Dim Eform As String, Eform2 As String, i As Long, j As Long, k As Long, ResA() As Double
    Dim res1 As Double, res2 As Double
    ' Evaluate the gradient vector (vector of partial first differentials, wrt each parameter)
    ' for the function specified in Func, using finite difference method.
    ReDim ResA(0 To NumP - 1)
    For i = 0 To NumP - 1
        Pvaluea0(i) = Pvaluea0(i) + dP
        res1 = Application.Run(func, XvalueA0, Pvaluea0, 1)
        Pvaluea0(i) = Pvaluea0(i) - dP * 2
        res2 = Application.Run(func, XvalueA0, Pvaluea0, 1)
        ResA(i) = (res1 - res2) / (dP * 2)
        Pvaluea0(i) = Pvaluea0(i) + dP
    Next i
    GradientA = ResA
End Function
Public Sub GetArray(arrayname)
    Dim temp As Variant
    If TypeName(arrayname) = "Range" Then
        If arrayname.Rows.Count = 1 Then
            If arrayname.Columns.Count = 1 Then
                arrayname = Array(arrayname.Value2)
                temp = arrayname(0)
                ReDim arrayname(1 To 1, 1 To 1)
                arrayname(1, 1) = temp
            Else
                arrayname = Array(arrayname.Value2)
                arrayname = WorksheetFunction.Transpose(arrayname)
            End If
        Else
            arrayname = arrayname.Value2
        End If
    ElseIf Not IsArray(arrayname) Then
        arrayname = Array(arrayname)
        arrayname = WorksheetFunction.Transpose(arrayname)
    Else
        On Error Resume Next
        arrayname = WorksheetFunction.Transpose(arrayname)
    End If
End Sub
'
Public Sub Array120D(arrayname As Variant, DA() As Double, NumRows As Long, NumCols As Long)
    Dim i As Long, j As Long, Off As Long
    ' Convert base 1 variant array  to base 0 array double array
    ' Convert 2B arrays with 1 row or 1 colum to 1D
    Off = LBound(arrayname)
    If NumCols = 1 Then
        For i = 1 To NumRows
            DA(i - Off) = arrayname(i, 1)
        Next i
    ElseIf NumRows = 1 Then
        For i = 1 To NumCols
            DA(i - Off) = arrayname(1, i)
        Next i
    Else
        For i = 1 To NumRows
            For j = 1 To NumCols
                DA(i - Off, j - Off) = arrayname(i, j)
            Next j
        Next i
    End If
End Sub
'
'Public Sub Array120S(arrayname As Variant, DS() As String, NumRows As Long, NumCols As Long)
'    Dim i As Long, j As Long, Off As Long
'    ' Convert base 1 variant array  to base 0 array double array
'    ' Convert 2D arrays with 1 row or 1 colum to 1D
'
'
'    Off = LBound(arrayname)
'    If NumCols = 1 Then
'        For i = 1 To NumRows
'            DS(i - Off) = arrayname(i, 1)
'        Next i
'
'    ElseIf NumRows = 1 Then
'        For i = 1 To NumCols
'            DS(i - Off) = arrayname(1, i)
'        Next i
'    Else
'        For i = 1 To NumRows
'            For j = 1 To NumCols
'                DS(i - Off, j - Off) = arrayname(i, j)
'            Next j
'        Next i
'    End If
'End Sub
'
