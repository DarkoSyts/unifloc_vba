'=======================================================================================
'Unifloc 7.9  Vulpes zerda                                           khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
'Модуль расчетов физико-химических свойств нефтей
'
'при внесении изменений обязательно оставить коментарий с описанием изменений, датой внесения изменений и именем внесшего изменения
'префикс unf_ символизиует что это функции Unifloc для внутреннего использования при кодировании
Option Explicit
Function unf_DeadOilViscosity_Standing(Temperature_K As Variant, gamma_oil As Variant)
        
        unf_DeadOilViscosity_Standing = (0.32 + 1.8 * 10 ^ 7 / (141.5 / gamma_oil - 131.5) ^ 4.53) * (360 / (1.8 * Temperature_K - 260)) ^ (10 ^ (0.43 + 8.33 / (141.5 / gamma_oil - 131.5)))
End Function
Function unf_Compressibility_Oil_VB(rs_m3m3 As Variant, gamma_gas As Variant, Temperature_K As Variant, gamma_oil As Variant, Pressure_MPa As Variant)
        
        unf_Compressibility_Oil_VB = (28.1 * rs_m3m3 + 30.6 * Temperature_K - 1180 * gamma_gas + 1784 / gamma_oil - 10910) / (100000 * Pressure_MPa)
End Function
Function unf_Bubblepoint_Standing(rsb_m3m3 As Variant, gamma_gas As Variant, Temperature_K As Variant, gamma_oil As Variant)
        
        Const Min_rsb As Double = 1.8
        
        Dim rsb_old As Double
        
        rsb_old = rsb_m3m3
                
        If (rsb_m3m3 < Min_rsb) Then
          
          rsb_m3m3 = Min_rsb
          
        End If
        
        Dim yg As Double
                
        yg = 1.225 + 0.001648 * Temperature_K - 1.769 / gamma_oil
        unf_Bubblepoint_Standing = 0.5197 * (rsb_m3m3 / gamma_gas) ^ 0.83 * 10 ^ yg
        
        If (rsb_old < Min_rsb) Then
          
          unf_Bubblepoint_Standing = (unf_Bubblepoint_Standing - 0.1013) * rsb_old / Min_rsb + 0.1013
           
        End If
End Function
Function unf_FVF_Saturated_Oil_Standing(rs_m3m3 As Variant, gamma_gas As Variant, Temperature_K As Variant, gamma_oil As Variant)
   Dim F As Double
   
        F = 5.615 * rs_m3m3 * (gamma_gas / gamma_oil) ^ 0.5 + 2.25 * Temperature_K - 575
        unf_FVF_Saturated_Oil_Standing = 0.972 + 0.000147 * F ^ 1.175
End Function
Function unf_FVF_Above_Bubblepoint_Pressure_Standing(Pressure_MPa As Variant, Bubblepoint_Pressure_MPa As Variant, Oil_Compressibility As Variant, FVF_Saturated_Oil As Variant)
        If Pressure_MPa <= Bubblepoint_Pressure_MPa Then
            unf_FVF_Above_Bubblepoint_Pressure_Standing = FVF_Saturated_Oil
        Else
            unf_FVF_Above_Bubblepoint_Pressure_Standing = FVF_Saturated_Oil * Exp(Oil_Compressibility * (Bubblepoint_Pressure_MPa - Pressure_MPa))
        End If
End Function
Function unf_Oil_Viscosity_Standing(rs_m3m3 As Variant, Dead_oil_viscosity As Variant, Pressure_MPa As Variant, Bubblepoint_Pressure_MPa As Variant)
    Dim a As Double, b As Double
    a = 5.6148 * rs_m3m3 * (0.1235 * 10 ^ (-5) * rs_m3m3 - 0.00074)
    b = 0.68 / 10 ^ (0.000484 * rs_m3m3) + 0.25 / 10 ^ (0.006176 * rs_m3m3) + 0.062 / 10 ^ (0.021 * rs_m3m3)
    
    unf_Oil_Viscosity_Standing = 10 ^ a * Dead_oil_viscosity ^ b
    
    If Bubblepoint_Pressure_MPa < Pressure_MPa Then
        unf_Oil_Viscosity_Standing = unf_Oil_Viscosity_Standing + 0.14504 * (Pressure_MPa - Bubblepoint_Pressure_MPa) * (0.024 * unf_Oil_Viscosity_Standing ^ 1.6 + 0.038 * unf_Oil_Viscosity_Standing ^ 0.56)
    End If
End Function
Function unf_Density_Oil_Standing(rs_m3m3 As Variant, gamma_gas As Variant, gamma_oil As Variant, Pressure_MPa As Variant, FVF_m3m3 As Variant, BP_Pressure_MPa As Variant, Compressibility_1MPa As Variant)
     unf_Density_Oil_Standing = (1000 * gamma_oil + 1.224 * gamma_gas * rs_m3m3) / FVF_m3m3
     If Pressure_MPa > BP_Pressure_MPa Then
        unf_Density_Oil_Standing = unf_Density_Oil_Standing * Exp(Compressibility_1MPa * (Pressure_MPa - BP_Pressure_MPa))
     End If
End Function
Function unf_GOR_Standing(Pressure_MPa As Variant, gamma_gas As Variant, Temperature_K As Variant, gamma_oil As Variant)
    Dim yg As Double
        yg = 1.225 + 0.001648 * Temperature_K - 1.769 / gamma_oil
        unf_GOR_Standing = gamma_gas * (1.92 * Pressure_MPa / 10 ^ yg) ^ 1.204
End Function
Function unf_Bubblepoint_Valko_McCainSI(rsb_m3m3 As Variant, gamma_gas As Variant, Temperature_K As Variant, gamma_oil As Variant)
        Const Min_rsb As Double = 1.8
        Const Max_rsb As Double = 800
        
        Dim rsb_old As Double
        Dim API As Double, Z1 As Double, Z2 As Double, z3 As Double, z4 As Double, Z As Double, lnpb As Double
        
        rsb_old = rsb_m3m3
        
        If (rsb_m3m3 < Min_rsb) Then
          
          rsb_m3m3 = Min_rsb
        
        End If
        
        If (rsb_m3m3 > Max_rsb) Then
          
          rsb_m3m3 = Max_rsb
        
        End If
        
        
     
        API = 141.5 / gamma_oil - 131.5
        
        Z1 = -4.814074834 + 0.7480913 * Log(rsb_m3m3) + 0.1743556 * Log(rsb_m3m3) ^ 2 - 0.0206 * Log(rsb_m3m3) ^ 3
        Z2 = 1.27 - 0.0449 * API + 4.36 * 10 ^ (-4) * API ^ 2 - 4.76 * 10 ^ (-6) * API ^ 3
        z3 = 4.51 - 10.84 * gamma_gas + 8.39 * gamma_gas ^ 2 - 2.34 * gamma_gas ^ 3
        z4 = -7.2254661 + 0.043155 * Temperature_K - 8.5548 * 10 ^ (-5) * Temperature_K ^ 2 + 6.00696 * 10 ^ (-8) * Temperature_K ^ 3
        Z = Z1 + Z2 + z3 + z4
        lnpb = 2.498006 + 0.713 * Z + 0.0075 * Z ^ 2
        
        unf_Bubblepoint_Valko_McCainSI = 2.718282 ^ lnpb
        
        If (rsb_old < Min_rsb) Then
          
          unf_Bubblepoint_Valko_McCainSI = (unf_Bubblepoint_Valko_McCainSI - 0.1013) * rsb_old / Min_rsb + 0.1013
           
        End If
        
        If (rsb_old > Max_rsb) Then
          
          unf_Bubblepoint_Valko_McCainSI = (unf_Bubblepoint_Valko_McCainSI - 0.1013) * rsb_old / Max_rsb + 0.1013
           
        End If
End Function
Function unf_GOR_VelardeSI(Pressure_MPa As Variant, Bubblepoint_Pressure_MPa As Variant, gamma_gas As Variant, _
                        Temperature_K As Variant, gamma_oil As Variant, rsb_m3_m3 As Variant)
Dim API As Double
API = 141.5 / gamma_oil - 131.5
Const MaxRs As Double = 800
If (Bubblepoint_Pressure_MPa > unf_Bubblepoint_Valko_McCainSI(MaxRs, gamma_gas, Temperature_K, gamma_oil)) Then
  
  If Pressure_MPa < Bubblepoint_Pressure_MPa Then
    unf_GOR_VelardeSI = (rsb_m3_m3) * (Pressure_MPa / Bubblepoint_Pressure_MPa)
  Else
    unf_GOR_VelardeSI = rsb_m3_m3
  End If
  Exit Function
End If
Dim Pr As Double
If (Bubblepoint_Pressure_MPa > 0) Then
  
  Pr = (Pressure_MPa - 0.101) / (Bubblepoint_Pressure_MPa)
Else
  
  Pr = 0
End If
If Pr <= 0 Then
  unf_GOR_VelardeSI = 0
  Exit Function
End If
Dim a_0 As Double
Dim a_1 As Double
Dim a_2 As Double
Dim a_3 As Double
Dim a_4 As Double
Dim A1 As Double
Dim b_0 As Double
Dim b_1 As Double
Dim b_2 As Double
Dim b_3 As Double
Dim b_4 As Double
Dim A2 As Double
Dim c_0 As Double
Dim c_1 As Double
Dim c_2 As Double
Dim c_3 As Double
Dim c_4 As Double
Dim A3 As Double, Rsr As Double
If Pr >= 1 Then unf_GOR_VelardeSI = rsb_m3_m3
If Pr < 1 Then
        a_0 = 1.8653 * 10 ^ (-4)
        a_1 = 1.672608
        a_2 = 0.92987
        a_3 = 0.247235
        a_4 = 1.056052
        
        A1 = a_0 * gamma_gas ^ a_1 * API ^ a_2 * (1.8 * Temperature_K - 460) ^ a_3 * Bubblepoint_Pressure_MPa ^ a_4
        
        b_0 = 0.1004
        b_1 = -1.00475
        b_2 = 0.337711
        b_3 = 0.132795
        b_4 = 0.302065
        
        A2 = b_0 * gamma_gas ^ b_1 * API ^ b_2 * (1.8 * Temperature_K - 460) ^ b_3 * Bubblepoint_Pressure_MPa ^ b_4
        
        c_0 = 0.9167
        c_1 = -1.48548
        c_2 = -0.164741
        c_3 = -0.09133
        c_4 = 0.047094
        
        A3 = c_0 * gamma_gas ^ c_1 * API ^ c_2 * (1.8 * Temperature_K - 460) ^ c_3 * Bubblepoint_Pressure_MPa ^ c_4
        
        Rsr = A1 * Pr ^ A2 + (1 - A1) * Pr ^ A3
        
        unf_GOR_VelardeSI = Rsr * rsb_m3_m3
End If
End Function
Function unf_FVF_McCainSI(rs_m3m3 As Variant, gamma_gas As Variant, STO_density_kg_m3 As Variant, Reservoir_oil_density_kg_m3 As Variant)
        unf_FVF_McCainSI = (STO_density_kg_m3 + 1.22117 * rs_m3m3 * gamma_gas) / Reservoir_oil_density_kg_m3
End Function
Function unf_Density_McCainSI(Pressure_MPa As Variant, gamma_gas As Variant, Temperature_K As Variant, _
                            gamma_oil As Variant, Rs_m3_m3 As Variant, BP_Pressure_MPa As Variant, _
                            Compressibility As Variant)
Dim API As Double, ropo As Double, pm As Double, pmmo As Double, epsilon As Double
Dim i As Integer, counter As Integer
Dim a0, A1, A2, A3, a4, a5
Dim roa As Double
API = 141.5 / gamma_oil - 131.5
'limit input range to Rs = 800, Pb =1000
If (Rs_m3_m3 > 800) Then
  Rs_m3_m3 = 800
  BP_Pressure_MPa = unf_Bubblepoint_Valko_McCainSI(Rs_m3_m3, gamma_gas, Temperature_K, gamma_oil)
End If
ropo = 845.8 - 0.9 * Rs_m3_m3
pm = ropo
pmmo = 0
epsilon = 0.000001
i = 0
counter = 0
Const MaxIter As Integer = 100
While (Abs(pmmo - pm) > epsilon And counter < MaxIter)
    
    i = i + 1
    
    pmmo = pm
    a0 = -799.21
    A1 = 1361.8
    A2 = -3.70373
    A3 = 0.003
    a4 = 2.98914
    a5 = -0.00223
    
    roa = a0 + A1 * gamma_gas + A2 * gamma_gas * ropo + A3 * gamma_gas * ropo ^ 2 + a4 * ropo + a5 * ropo ^ 2
    ropo = (Rs_m3_m3 * gamma_gas + 818.81 * gamma_oil) / (0.81881 + Rs_m3_m3 * gamma_gas / roa)
    pm = ropo
    counter = counter + 1
   ' Debug.Assert counter < 20
Wend
Dim dpp As Double, pbs As Double, dPT As Double
If Pressure_MPa <= BP_Pressure_MPa Then
        dpp = (0.167 + 16.181 * (10 ^ (-0.00265 * pm))) * (2.32328 * Pressure_MPa) - 0.16 * (0.299 + 263 * (10 ^ (-0.00376 * pm))) * (0.14503774 * Pressure_MPa) ^ 2
        pbs = pm + dpp
        dPT = (0.04837 + 337.094 * pbs ^ (-0.951)) * (1.8 * Temperature_K - 520) ^ 0.938 - (0.346 - 0.3732 * (10 ^ (-0.001 * pbs))) * (1.8 * Temperature_K - 520) ^ 0.475
        pm = pbs - dPT
        unf_Density_McCainSI = pm
Else
        dpp = (0.167 + 16.181 * (10 ^ (-0.00265 * pm))) * (2.32328 * BP_Pressure_MPa) - 0.16 * (0.299 + 263 * (10 ^ (-0.00376 * pm))) * (0.14503774 * BP_Pressure_MPa) ^ 2
        pbs = pm + dpp
        dPT = (0.04837 + 337.094 * pbs ^ (-0.951)) * (1.8 * Temperature_K - 520) ^ 0.938 - (0.346 - 0.3732 * (10 ^ (-0.001 * pbs))) * (1.8 * Temperature_K - 520) ^ 0.475
        pm = pbs - dPT
        unf_Density_McCainSI = pm * Exp(Compressibility * (Pressure_MPa - BP_Pressure_MPa))
End If
End Function
Function unf_DeadOilViscosity_Beggs_Robinson(Temperature_K As Variant, gamma_oil As Variant)
       Dim X As Double
        X = (1.8 * Temperature_K - 460) ^ (-1.163) * Exp(13.108 - 6.591 / gamma_oil)
        unf_DeadOilViscosity_Beggs_Robinson = 10 ^ (X) - 1
End Function
Function unf_SaturatedOilViscosity_Beggs_Robinson(GOR_pb_m3m3 As Variant, Dead_oil_viscosity As Variant)
       Dim a As Double
       Dim b As Double
        a = 10.715 * (5.615 * GOR_pb_m3m3 + 100) ^ (-0.515)
        b = 5.44 * (5.615 * GOR_pb_m3m3 + 150) ^ (-0.338)
        unf_SaturatedOilViscosity_Beggs_Robinson = a * (Dead_oil_viscosity) ^ b
End Function
Function unf_OilViscosity_Vasquez_Beggs(Saturated_oil_viscosity As Variant, Pressure_MPa As Variant, BP_Pressure_MPa As Variant)
        Dim C1 As Double
        Dim C2 As Double
        Dim c3 As Double
        Dim c4 As Double
        Dim M As Double
        
        C1 = 957
        C2 = 1.187
        c3 = -11.513
        c4 = -0.01302
        M = C1 * Pressure_MPa ^ C2 * Exp(c3 + c4 * Pressure_MPa)
        unf_OilViscosity_Vasquez_Beggs = Saturated_oil_viscosity * (Pressure_MPa / BP_Pressure_MPa) ^ M
End Function
Function unf_OilViscosity_Beggs_Robinson_Vasques_Beggs(rs_m3m3 As Variant, GOR_pb_m3m3 As Variant, Pressure_MPa As Variant, _
                                                   BP_Pressure_MPa As Variant, Dead_oil_viscosity As Variant)
 If (Pressure_MPa < BP_Pressure_MPa) Then 'saturated
   unf_OilViscosity_Beggs_Robinson_Vasques_Beggs = unf_SaturatedOilViscosity_Beggs_Robinson(rs_m3m3, Dead_oil_viscosity)
 Else 'undersaturated
   unf_OilViscosity_Beggs_Robinson_Vasques_Beggs = unf_OilViscosity_Vasquez_Beggs( _
     unf_SaturatedOilViscosity_Beggs_Robinson(GOR_pb_m3m3, Dead_oil_viscosity), Pressure_MPa, BP_Pressure_MPa)
 End If
 
End Function
Function unf_Viscosity_Grace(Pressure_MPa As Variant, Bubblepoint_Pressure_MPa As Variant, Density_kg_m3 As Variant, BP_Density_kg_m3 As Variant)
    Dim density As Double
    Dim Bubblepoint_Density As Double
    Dim rotr As Double
    Dim MU As Double
    Dim robtr As Double
    Dim M As Double
    density = Density_kg_m3 * 0.06243
    Bubblepoint_Density = BP_Density_kg_m3 * 0.06243
    rotr = 0.0008 * density ^ 3 - 0.1017 * density ^ 2 + 4.3344 * density - 63.001
    MU = Exp(0.0281 * rotr ^ 3 - 0.0447 * rotr ^ 2 + 1.2802 * rotr + 0.0359)
            If Bubblepoint_Pressure_MPa < Pressure_MPa Then
            
                robtr = -68.1067 * Log(Bubblepoint_Density) ^ 3 + 783.2173 * Log(Bubblepoint_Density) ^ 2 - 2992.2353 * Log(Bubblepoint_Density) + 3797.6
                M = Exp(0.1124 * robtr ^ 3 - 0.0618 * robtr ^ 2 + 0.7356 * robtr + 2.3328)
                MU = MU * (Density_kg_m3 / BP_Density_kg_m3) ^ M
            
            End If
    unf_Viscosity_Grace = MU
End Function
' ==================================================================
' PVT gas
' ==================================================================
Function unf_calc_mu_gas_cP(T_K As Double, P_MPa As Double, Z As Double, GammaGas As Double)
' rnt 20150303
' расчет вязкости газа after Lee    http://petrowiki.org/Gas_viscosity
' похоже, что отсюда
' Lee, A.L., Gonzalez, M.H., and Eakin, B.E. 1966. The Viscosity of Natural Gases. J Pet Technol 18 (8): 997–1000. SPE-1340-PA. http://dx.doi.org/10.2118/1340-PA
'
   
    Dim r As Double, mwg As Double, gd As Double, a As Double, b As Double, c As Double
         
'   ' rnt 20150312 проверка диапазонов значений
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(GammaGas, "gamma_gas", const_gamma_gas_min, const_gamma_gas_max, "удельная плотность газа вне диапазона", "calc_mu_gas_cP", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(T_K, "t_K", const_T_K_min, const_T_K_max, "абсолютная температура вне диапазона", "calc_mu_gas_cP", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(P_MPa, "p_MPa", const_P_MPa_min, const_P_MPa_max, "давление вне диапазона", "calc_mu_gas_cP", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(z, "z", 0, 5, "давление вне диапазона", "calc_mu_gas_cP", True, error_probability)
    r = 1.8 * T_K
    mwg = 28.966 * GammaGas
    gd = P_MPa * mwg / (Z * T_K * 8.31)
    a = (9.379 + 0.01607 * mwg) * r ^ 1.5 / (209.2 + 19.26 * mwg + r)
    b = 3.448 + 986.4 / r + 0.01009 * mwg
    c = 2.447 - 0.2224 * b
    unf_calc_mu_gas_cP = 0.0001 * a * Exp(b * gd ^ c)
    
End Function
Public Function unf_calc_Zgas_d(T_K As Double, P_MPa As Double, GammaGas As Double, Optional ByVal z_cor As Z_CORRELATION = z_BB)
' calculus of z factor
' rnt 20150303 не желательно использовать значение корреляции отличное от 0
' http://petrowiki.org/Real_gases
' расчет по Дранчуку или по Саттону
' Dranchuk, P.M. and Abou-Kassem, H. 1975. Calculation of Z Factors For Natural Gases Using Equations of State. J Can Pet Technol 14 (3): 34. PETSOC-75-03-03. http://dx.doi.org/10.2118/75-03-03
' Sutton, R.P. 1985. Compressibility Factors for High-Molecular-Weight Reservoir Gases. Presented at the SPE Annual Technical Conference and Exhibition, Las Vegas, Nevada, USA, 22-26 September. SPE-14265-MS. http://dx.doi.org/10.2118/14265-MS
    Dim T_pc As Double
    Dim p_pc As Double
    Dim Z As Double
    
'    Dim ranges_good As Boolean
'
'    ' rnt 20150312 проверка диапазонов значений
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(GammaGas, "gamma_gas", const_gamma_gas_min, const_gamma_gas_max, "удельная плотность газа вне диапазона", "calc_Zgas", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(T_K, "t_K", const_T_K_min, const_T_K_max, "абсолютная температура вне диапазона", "calc_Zgas", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(P_MPa, "p_MPa", const_P_MPa_min, const_P_MPa_max, "давление вне диапазона", "calc_Zgas", True, error_probability)
'
    
    ' rnt 20150312 end
    'z_correlation = 1
    If z_cor = z_Dranchuk Then
     T_pc = PseudoTemperatureStanding(GammaGas)
     p_pc = PseudoPressureStanding(GammaGas)
     Z = ZFactorDranchuk(T_K / T_pc, P_MPa / p_pc)
    Else
     T_pc = PseudoTemperature(GammaGas)
     p_pc = PseudoPressure(GammaGas)
     Z = ZFactor(T_K / T_pc, P_MPa / p_pc)
    End If
    unf_calc_Zgas_d = Z * aaaa
   
   ' Debug.Print z, T_pc, P_pc, t_K / T_pc, p_MPa / P_pc
    
End Function
Public Function unf_calc_Bg_m3m3(t_c As Double, p_atma As Double, GammaGas As Double, Optional correlation As Integer = 0)
    'function calculates gas formation volume factor
    
    ' t_С   -   temprature, C
    ' p_atma   -   pressure, atma
    ' gamma_g   - specific gas density
    ' correlation
    '    0 - using Dranchuk and Abou-Kassem correlation
    '    else - using Sutton correlation for the pseudocritical properties of hydrocarbon mixtures
    Dim T_K As Double
    Dim P_MPa As Double
    Dim Z As Double
    ' rnt 20150312 проверка диапазонов значений
'    Dim ranges_good As Boolean
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(GammaGas, "gamma_gas", const_gamma_gas_min, const_gamma_gas_max, "удельная плотность газа вне диапазона", "calc_Bg_m3m3", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(T_C, "t_C", const_T_C_min, const_T_C_max, "температура в градусах Цельсия вне диапазона", "calc_Bg_m3m3", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(p_atma, "p_atma", const_p_atma_min, const_p_atma_max, "давление вне диапазона", "calc_Bg_m3m3", True, error_probability)
   ' rnt 20150312 end
    Debug.Assert GammaGas > 0.5
    T_K = t_c + 273
    P_MPa = p_atma / 10.13
    Z = unf_calc_Zgas_d(T_K, P_MPa, GammaGas, correlation)
    unf_calc_Bg_m3m3 = unf_calc_Bg_z_m3m3(T_K, P_MPa, Z)
End Function
Function unf_calc_Bg_z_m3m3(T_K As Double, P_MPa As Double, Z As Double)
' Расчет объемного коэффициента газа при известном коэффиенте сжимаемости газа
' rnt 20150303
' хорошо определить при какой температуре рассчитан объемный коэффициент газа
   
   ' rnt 20150312 проверка диапазонов значений
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(T_K, "t_K", const_T_K_min, const_T_K_max, "абсолютная температура вне диапазона", "calc_Bg_z_m3m3", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(P_MPa, "p_MPa", const_P_MPa_min, const_P_MPa_max, "давление вне диапазона", "calc_Bg_z_m3m3", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(z, "z", 0, 5, "давление вне диапазона", "calc_Bg_z_m3m3", True, error_probability)
'
    
   ' rnt 20150312 end
    unf_calc_Bg_z_m3m3 = 0.00034722 * T_K * Z / P_MPa
End Function
'======================= сервисные функции для расчета свойств газа ==============================
Private Function ZFactorEstimateDranchuk(Tpr As Double, Ppr As Double, Z As Double)
  'Continious function which return 0 if Z factor is correct for given pseudoreduced temperature and pressure
  'Used to find Z factor
  
  Const A1 As Double = 0.3265
  Const A2 As Double = -1.07
  Const A3 As Double = -0.5339
  Const a4 As Double = 0.01569
  Const a5 As Double = -0.05165
  Const a6 As Double = 0.5475
  Const a7 As Double = -0.7361
  Const a8 As Double = 0.1844
  Const a9 As Double = 0.1056
  Const a10 As Double = 0.6134
  Const a11 As Double = 0.721
  Dim rho_r As Double
  rho_r = 0.27 * Ppr / (Z * Tpr)
  ZFactorEstimateDranchuk = -Z + (A1 + A2 / Tpr + A3 / Tpr ^ 3 + a4 / Tpr ^ 4 + a5 / Tpr ^ 5) * rho_r + _
       (a6 + a7 / Tpr + a8 / Tpr ^ 2) * rho_r ^ 2 - a9 * (a7 / Tpr + a8 / Tpr ^ 2) * rho_r ^ 5 + _
       a10 * (1 + a11 * rho_r ^ 2) * rho_r ^ 2 / Tpr ^ 3 * Exp(-a11 * rho_r ^ 2) + 1#
End Function
Private Function ZFactorDranchuk(Tpr As Double, Ppr As Double) As Double
' rnt_bug 2015/03/03  расчет может быть не корректным при определенных значения приведенных давелния и температуры
' необходимо исправить - заменить метод деления отрезка пополам на метод ньютона модифицированный
' необходимо вставить сообщение о выходе расчета за границы применимости и предупреждение
  
  'rnt 20150319 корректировка расчета при некорректных входных данных
   
'   Dim ranges_good As Boolean
'
'   ranges_good = True
'   ranges_good = ranges_good And CheckRanges(Ppr, "Ppr", const_Ppr_min, const_Ppr_max, _
'                                                "Псевдокритическое давление вне диапазона", "ZFactorDranchuk", True, error_probability)
'   ranges_good = ranges_good And CheckRanges(Tpr, "Tpr", const_Tpr_min, const_Tpr_max, _
'                                                "Псевдокритическая температура вне диапазона", "ZFactorDranchuk", True, error_probability)
'
'  ' rnt 20150319 end
  
  Debug.Assert Ppr >= const_Ppr_min
  Dim y_low As Double
  Dim y_hi As Double
  Dim Z_low As Double
  Dim Z_hi As Double
  Dim Z_mid As Double
  Z_low = 0.1
  Z_hi = 5
  Dim i As Integer
  i = 0
  'find foot of ZFactorEstimateDranchuk function by bisection of [Z_low...Z_hi] interval
  Do
   'we assume that for Z_low and Z_hi ZFactorEstimateDranchuk function of different signes
   Z_mid = 0.5 * (Z_hi + Z_low)
   y_low = ZFactorEstimateDranchuk(Tpr, Ppr, Z_low)
   y_hi = ZFactorEstimateDranchuk(Tpr, Ppr, Z_mid)
   If (y_low * y_hi < 0) Then
    Z_hi = Z_mid
   Else
    Z_low = Z_mid
   End If
   i = i + 1
  Loop Until (i > 200 Or Abs(Z_low - Z_hi) < 0.000001)
  ' rnt check iteration convergence ******************************
  If i > 20 And Abs(Z_low - Z_hi) > 0.001 Then
   ' solution not found
   addLogMsg ("*****ZFactorDranchuk: z фактор не найден из за расхождения итераций по Дранчуку. Tpr = " & Tpr & "  Ppr = " & Ppr)
' error_probability = increment_error_probability(error_probability, 1000)
  End If
  '****************************************************************
  ZFactorDranchuk = Z_mid
  ' rnt 20150312 костыль для исправления ошибки при низких приведенных давлениях
  '              исправление дает небольшую погрешность - следует заменить далее на корректный метод решения уравнения дранчука
  If ZFactorDranchuk > 4.99 Then
   addLogMsg (" ZFactorDranchuk: корректировка z фактора из за расхождения итерация по Дранчуку. Tpr = " & Tpr & "  Ppr = " & Ppr)
   ZFactorDranchuk = ZFactor(Tpr, Ppr)
  End If
  ' rnt 20150312 end
End Function
Private Function ZFactor(Tpr As Double, Ppr As Double) As Double
' rnt_warning 20150303 известно, что функция дает большую погрешность при расчете
' не рекомендуется использовать
        
    Dim a As Double, b As Double, c As Double, D As Double
'rnt 20150312 корректировка расчета при некорректных входных данных
   
'   Dim ranges_good As Boolean
'
'   ranges_good = True
'   ranges_good = ranges_good And CheckRanges(Ppr, "Ppr", const_Ppr_min, const_Ppr_max, _
'                                                "Псевдокритическое давление вне диапазона", "ZFactor", True, error_probability)
'   ranges_good = ranges_good And CheckRanges(Tpr, "Tpr", 0.92, const_Tpr_max, _
'                                                "Псевдокритическая температура вне диапазона", "ZFactor", True, error_probability)
'    ' граница задана руками, так как специфична именно для этой функции
                                            
' rnt 20150312 end
    a = 1.39 * (Tpr - 0.92) ^ 0.5 - 0.36 * Tpr - 0.101
    b = Ppr * (0.62 - 0.23 * Tpr) + Ppr ^ 2 * (0.006 / (Tpr - 0.86) - 0.037) + 0.32 * Ppr ^ 6 / Exp(20.723 * (Tpr - 1))
    c = 0.132 - 0.32 * Log(Tpr) / Log(10)
    D = Exp(0.715 - 1.128 * Tpr + 0.42 * Tpr ^ 2)
    ZFactor = a + (1 - a) * Exp(-b) + c * Ppr ^ D
    
    
'    ranges_good = ranges_good And CheckRanges(ZFactor, "ZFactor", const_Z_min, const_Z_max, _
'                                                "Расчитанный z вне диапазона (используйте ZFactorDranchuk)", "ZFactor", True, error_probability)
  
    
End Function
Private Function PseudoTemperature(gamma_gas As Double)
    PseudoTemperature = 95 + 171 * gamma_gas
End Function
Private Function PseudoPressure(gamma_gas As Double)
    PseudoPressure = 4.9 - 0.4 * gamma_gas
End Function
Private Function PseudoTemperatureStanding(gamma_gas As Double)
    PseudoTemperatureStanding = 93.3 + 180 * gamma_gas - 6.94 * gamma_gas ^ 2
End Function
Private Function PseudoPressureStanding(gamma_gas As Double)
    PseudoPressureStanding = 4.6 + 0.1 * gamma_gas - 0.258 * gamma_gas ^ 2
End Function
' ================================================================
' PVT water
' ================================================================
' Water viscosity
Function unf_calc_mu_wat_cP(Pressure_MPa As Double, Temperature_K As Double, Salinity_ppm As Double)
' http://petrowiki.org/Produced_water_properties
    Dim wpTDS As Double, a As Double, b As Double, visc As Double, psi As Double
    
    ' rnt 20150319 проверка диапазонов значений
    
    
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(Temperature_K, "Temperature_K", const_T_K_min, const_T_K_max, _
'                                                        "абсолютная температура вне диапазона", "calc_WaterViscosity", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Pressure_MPa, "Pressure_MPa", const_P_MPa_min, const_P_MPa_max, _
'                                                        "давление вне диапазона", "calc_WaterViscosity", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Salinity_ppm, "Salinity_ppm", const_Salinity_ppm_min, const_Salinity_ppm_max, _
'                                                        "соленость вне диапазона", "calc_WaterViscosity", True, error_probability)
'
   
   ' rnt 20150319 end
    wpTDS = Salinity_ppm / (10000)  ' weigth percent salinity
    
    a = 109.574 - 8.40564 * wpTDS + 0.313314 * wpTDS ^ 2 + 0.00872213 * wpTDS ^ 3
    b = -1.12166 + 0.0263951 * wpTDS - 0.000679461 * wpTDS ^ 2 - 5.47119 * 10 ^ (-5) * wpTDS ^ 3 + 1.55586 * 10 ^ (-6) * wpTDS ^ 4
    
    visc = a * (1.8 * Temperature_K - 460) ^ b
    psi = Pressure_MPa * 145.04
    unf_calc_mu_wat_cP = visc * (0.9994 + 4.0295 * 10 ^ (-5) * psi + 3.1062 * 10 ^ (-9) * psi ^ 2)
End Function
' Water density
Function unf_calc_Bw_d(Pressure_MPa As Double, Temperature_K As Double, Salinity_ppm As Double)
' http://petrowiki.org/Produced_water_density
  
    
    unf_calc_Bw_d = unf_calc_BwSC_d(Salinity_ppm) / unf_calc_Bw_m3m3(Pressure_MPa, Temperature_K)
    
End Function
' Water FVF
Function unf_calc_Bw_m3m3(Pressure_MPa As Double, Temperature_K As Double)
' http://petrowiki.org/Produced_water_formation_volume_factor
    ' rnt 20150319 проверка диапазонов значений
'    Debug.Assert Temperature_K < 1000
    
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(Temperature_K, "Temperature_K", const_T_K_min, const_T_K_max, _
'                                                        "абсолютная температура вне диапазона", "calc_WaterFVF", True, error_probability)
'                                                       ' Debug.Assert Temperature_K > 273
'                               '                         Debug.Assert Temperature_K < 0
'
'    ranges_good = ranges_good And CheckRanges(Pressure_MPa, "Pressure_MPa", const_P_MPa_min, const_P_MPa_max, _
'                                                        "давление вне диапазона", "calc_WaterFVF", True, error_probability)
'
'   ' rnt 20150312 end
   
 Dim F As Double, psi As Double, dvwp As Double, dvwt As Double
 F = 1.8 * Temperature_K - 460
 psi = Pressure_MPa * 145.04
 dvwp = -1.95301 * 10 ^ (-9) * psi * F - 1.72834 * 10 ^ (-13) * psi ^ 2 * F - 3.58922 * 10 ^ (-7) * psi - 2.25341 * 10 ^ (-10) * psi ^ 2
 dvwt = -1.0001 * 10 ^ (-2) + 1.33391 * 10 ^ (-4) * F + 5.50654 * 10 ^ (-7) * F ^ 2
 unf_calc_Bw_m3m3 = (1 + dvwp) * (1 + dvwt)
End Function
' Water density at standard conditions
Function unf_calc_BwSC_d(Salinity_ppm As Double)
    
   ' rnt 20150319 проверка диапазонов значений
    
    
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(Salinity_ppm, "Salinity_ppm", const_Salinity_ppm_min, const_Salinity_ppm_max, _
'                                                        "соленость вне диапазона", "calc_WaterDensitySC", True, error_probability)
   
   ' rnt 20150312 end
    
    Dim wpTDS As Double
    
    wpTDS = Salinity_ppm / (10000)
    unf_calc_BwSC_d = 0.0160185 * (62.368 + 0.438603 * wpTDS + 0.00160074 * wpTDS ^ 2)
   
End Function
Function unf_calc_Sal_BwSC_ppm(BwSC As Double)
' функция для оценки солености воды по объемному коэффициенту (получена как обратная к unf_calc_BwSC_d)
    unf_calc_Sal_BwSC_ppm = (624.711071129603 * BwSC / 0.0160185 - 20192.9595437054) ^ 0.5 - 137.000074965329
    unf_calc_Sal_BwSC_ppm = unf_calc_Sal_BwSC_ppm * 10000
End Function
' GWR
Function unf_calc_GWR_m3m3(Pressure_MPa As Double, Temperature_K As Double, Salinity_ppm As Double)
' rnt 20150303 надо найти источник корреляции - скорее всего крига Брилла по многофазному потоку
' 201503 не используется в расчетах
 Dim F As Double, psi As Double, wpTDS As Double, a As Double, b As Double, c As Double, Rswws As Double
    
    ' rnt 20150319 проверка диапазонов значений
    
    
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(Temperature_K, "Temperature_K", const_T_K_min, const_T_K_max, _
'                                                        "абсолютная температура вне диапазона", "calc_GWR", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Pressure_MPa, "Pressure_MPa", const_P_MPa_min, const_P_MPa_max, _
'                                                        "давление вне диапазона", "calc_GWR", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Salinity_ppm, "Salinity_ppm", const_Salinity_ppm_min, const_Salinity_ppm_max, _
'                                                        "соленость вне диапазона", "calc_GWR", True, error_probability)
   
   ' rnt 20150319 end
    F = 1.8 * Temperature_K - 460
    psi = Pressure_MPa * 145.04
    wpTDS = Salinity_ppm / (10000)
    a = 8.15839 - 0.0612265 * F + 1.91663 * 10 ^ (-4) * F ^ 2 - 2.1654 * 10 ^ (-7) * F ^ 3
    b = 1.01021 * 10 ^ (-2) - 7.44241 * 10 ^ (-5) * F + 3.05553 * 10 ^ (-7) * F ^ 2 - 2.94883 * 10 ^ (-10) * F ^ 3
    c = (-9.02505 + 0.130237 * F - 8.53425 * 10 ^ (-4) * F ^ 2 + 2.34122 * 10 ^ (-6) * F ^ 3 - 2.37049 * 10 ^ (-9) * F ^ 4) * 10 ^ (-7)
    Rswws = (a + b * psi + c * psi ^ 2) * 0.1781
    unf_calc_GWR_m3m3 = Rswws * 10 ^ (-0.0840655 * wpTDS * F ^ (-0.285854))
End Function
' Water compressibility
Function unf_calc_WaterCompressibility_atma(Pressure_MPa As Double, Temperature_K As Double, Salinity_ppm As Double)
' http://petrowiki.org/Produced_water_compressibility
' 201503 не используется в расчетах
 
 Dim F As Double, psi As Double
 
   ' rnt 20150319 проверка диапазонов значений
    
    
'    Dim ranges_good As Boolean
'
'    ranges_good = True
'    ranges_good = ranges_good And CheckRanges(Temperature_K, "Temperature_K", const_T_K_min, const_T_K_max, _
'                                                        "абсолютная температура вне диапазона", "calc_WaterCompressibilty", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Pressure_MPa, "Pressure_MPa", const_P_MPa_min, const_P_MPa_max, _
'                                                        "давление вне диапазона", "calc_WaterCompressibilty", True, error_probability)
'    ranges_good = ranges_good And CheckRanges(Salinity_ppm, "Salinity_ppm", const_Salinity_ppm_min, const_Salinity_ppm_max, _
'                                                        "соленость вне диапазона", "calc_WaterCompressibilty", True, error_probability)
   
   ' rnt 20150319 end
 
 F = 1.8 * Temperature_K - 460
 psi = Pressure_MPa * 145.04
 unf_calc_WaterCompressibility_atma = 0.1 * 145.04 / (7.033 * psi + 0.5415 * Salinity_ppm - 537 * F + 403300)
End Function
