'=======================================================================================
'Unifloc 7.17  Test                                          khabibullin.ra@gubkin.ru
'Petroleum engineering calculations modules (macroses)
'2000 - 2019
'
'=======================================================================================
' класс для расчета многофазного потока в трубе (вторая версия после рефакторинга Алма)
'
' История
' 2016.04    Реализован новый механизм расчета распределения давления в стволе с использованием модуля решения ОДУ
'            Упрощена структура хранения массивов
' 2017.01    Модернизация под 7 версию. Исправление ошибок и контроль температуры
' 2019.04    Рефакторинг в сторону упрощения
' 2019.10    Рефакторинг в сторону упрощения - продолжение
Option Explicit
Option Base 0
Public ZeroCoordMes_m As Double                        ' начальная координата трубы, измеренная, от которой будут отсчитываться координаты в выходных массивах
Public ZeroCoordVert_m As Double                       ' начальная координата трубы, вертикальная, от которой будут отсчитываться координаты в выходных массивах
Public fluid As CPVT                                   ' базовый флюид в трубе. Определяет свойства и расходы и фазовый состав
Public ambient_formation As New CAmbientFormation      ' порода за пределями скважины
Public curve As New CCurves                           ' все кривые планируется прятать тут
'Public curves As New CCurves
Public t_calc_C As Double                              ' начальная температура флюида для расчета с учетом эмисии тепла
Public p_result_atma As Double                         ' давление - результат расчета для отчета
Public t_result_C As Double                            ' температура - результат расчета для отчета
Private param_ As PARAMCALC                               ' параметры расчета по трубе
' геометрия трубы заданная массивами
Private h_mes_insert_m_ As CInterpolation              ' измеренная глубина которую надо вставить в расчет трубы
                                                       ' чтобы отловить изменение градиента температуры, например при динамическом уровне
Private legth_total_m_ As Double                       ' общая длинна трубы
Private depth_vert_total_m_ As Double                  ' общая глубина трубы
' расчетные параметры по трубе  (используются для вывода после проведения расчета)
Private flow_params_out_() As PIPE_FLOW_PARAMS         ' расчетные параметры по трубе после расчета
Private dTdLinit_ As Double                            ' распределение градиента температуры по длине начальное
' набор расчетных параметров по стволу скважины
' Private num_points_curve_ As Integer                    ' количество точек которые должны быть сохранены для распределения давления в трубе в итоговых кривых
Private step_hm_curve_ As Double                        ' шаг для формирования выходного массива по трубе. м
Private hm_curve_ As New CInterpolation                ' кривая для хранения набора точек, для которых должны строится все другие кривые
' поправочные коэффициенты для расчета распределения давления
Private c_calibr_grav_ As Double
Private c_calibr_fric_ As Double
Public GLVin As CGLvalve  ' link to gas lift valve in pipe
 
 ' конструктор класса
 ' вызывается при создании класса - гарантирует что все объекты будут созданы
Private Sub Class_Initialize()
   Set GLVin = Nothing
   ZeroCoordMes_m = 0
   ZeroCoordVert_m = 0
   legth_total_m_ = 100
   ReDim flow_params_out_(0) As PIPE_FLOW_PARAMS
   curve("c_Roughness").isStepFunction = True ' шероховатость и диаметр трубы меняют ступенчато и не интерполируются
   curve("c_Diam").isStepFunction = True
   curve("c_fpat").isStepFunction = True
   Set fluid = New CPVT
   
   param_ = set_calc_flow_param(calc_along_coord:=True, _
                                flow_along_coord:=True, _
                                hcor:=Ansari, _
                                temp_method:=StartEndTemp, _
                                length_gas_m:=0)
   Set h_mes_insert_m_ = New CInterpolation
   Call h_mes_insert_m_.AddPoint(0, 0)
   Call h_mes_insert_m_.AddPoint(length_mes_m, 0)
   StepHmCurve = 1000    ' по умолчанию шаг 100 м для сохранения кривых
   c_calibr_grav_ = 1
   c_calibr_fric_ = 1
End Sub
Public Property Get param() As PARAMCALC
   param = param_
End Property
Public Property Let param(val As PARAMCALC)
    param_ = val
    If val.length_gas_m > 0 Then
        ' if correlation division point given - stable points in pipe have to be updated
        Call add_h_mes_save_m(val.length_gas_m)
        StepHmCurve = StepHmCurve
    End If
End Property
Public Property Get c_calibr_grav() As Double
   c_calibr_grav = c_calibr_grav_
End Property
Public Property Let c_calibr_grav(val As Double)
   If val >= 0 And val < 2 Then ' не стоит подстрочный коэффициент менять слишком сильно - если что тут можно поправить
       c_calibr_grav_ = val
   End If
End Property
Public Property Let c_calibr_fric(val As Double)
   If val >= 0 And val < 2 Then ' не стоит подстрочный коэффициент менять слишком сильно - если что тут можно поправить
       c_calibr_fric_ = val
   End If
End Property
Public Property Get c_calibr_fric() As Double
   c_calibr_fric = c_calibr_fric_
End Property
 
Public Property Get h_mes_save_m(ByVal i As Integer) As Double
  h_mes_save_m = h_mes_insert_m_.pointX(i)
End Property
Public Function add_h_mes_save_m(ByVal val As Double) As Boolean
    If val > ZeroCoordMes_m And val < (ZeroCoordMes_m + length_mes_m) Then
        Call h_mes_insert_m_.AddPoint(val, 0)   ' Запишем точку, которую надо сохранить
    End If
End Function
Public Property Get StepHmCurve() As Double
   StepHmCurve = step_hm_curve_
End Property
Public Property Let StepHmCurve(val As Double)
   Dim i As Integer
   Dim Hm As Double
   Dim Hm_max As Double
   
   step_hm_curve_ = val
   ' установили шаг - сразу подготовим массив точек по давлению для которых должен быть проведен расчет
   hm_curve_.ClearPoints    ' очистили точки по давлению
   For i = 1 To h_mes_insert_m_.num_points    ' пустили цикл по количеству точек, которые должны быть обязательно
       Hm = h_mes_insert_m_.pointX(i)
       hm_curve_.AddPoint Hm, 0               ' добвляем точку в выходной массив. Важен только x, поэтому y задаем произвольно
                                              ' здесь же должны задаться первая и последняя точки
   Next i
   ' далее добавим все промежуточные точки с заданым шагом
   i = 0
   Hm = hm_curve_.pointX(1)   ' начинаем с первой точки
   Hm_max = hm_curve_.pointX(hm_curve_.num_points)
   Do
       Hm = Hm + StepHmCurve
       If Hm < Hm_max Then                     ' если новая точка попадает в диапазон, добавляем ее.
           hm_curve_.AddPoint Hm, 0             ' здесь предполагается, что координаты будут возрастать
       End If                                  ' если такая точка есть, то она просто перезапишется
   Loop While Hm < Hm_max
   ' здесь получили в кривой hm_curve_ все точки для которых надо искать параметры
End Property
' длина сегмента трубы
Public Property Get length_mes_m() As Double
    length_mes_m = legth_total_m_
End Property
Public Property Get depth_vert_m() As Double
    depth_vert_m = depth_vert_total_m_
End Property
   
Public Sub InitTlinear(ByVal T_start_coord_C As Double, ByVal T_end_coord_C As Double)
' начальная инициализация распределения температуры в трубе
       If legth_total_m_ > 0 Then
           dTdLinit_ = (T_end_coord_C - T_start_coord_C) / legth_total_m_
       End If
       curve("c_Tinit").ClearPoints
       curve("c_Tinit").AddPoint ZeroCoordMes_m, T_start_coord_C
       curve("c_Tinit").AddPoint ZeroCoordMes_m + length_mes_m, T_end_coord_C
End Sub
Private Function dTdL_linear_Cm(lmes_m As Double) As Double
    ' возвращает градиент температуры исходя из линейного приближения
    dTdL_linear_Cm = dTdLinit_
End Function
Private Function t_linear_C(lmes_m As Double) As Double
   ' возвращает температуру исходя из линейного приближения
   t_linear_C = curve("c_Tinit").getPoint(lmes_m)
End Function
Private Function t_amb_C(lmes_m As Double) As Double
   ' возвращает температуру исходя из окружения скважины
   Dim Hv_m As Double
   Hv_m = h_vert_h_mes_m(lmes_m)              ' определяем вертикальную глубину для заданной измеренной глубины
   t_amb_C = ambient_formation.amb_temp_C(Hv_m)
End Function
Private Function t_init_C(lmes_m As Double) As Double
    Select Case param.temp_method
        Case StartEndTemp
            t_init_C = t_linear_C(lmes_m) ' температуру берем извне
        Case GeoGradTemp
            t_init_C = t_amb_C(lmes_m)
        Case AmbientTemp
            t_init_C = t_amb_C(lmes_m)
    End Select
End Function
 
Private Function dTdL_amb_Cm(lmes_m As Double) As Double
   ' возвращает градиент температуры исходя из окружения
   Dim theta_deg As Double
   Dim Hv_m As Double
   theta_deg = angle_hmes_deg(lmes_m)         ' определяем наклон на заданной глубине
   Hv_m = h_vert_h_mes_m(lmes_m)              ' определяем вертикальную глубину для заданной измеренной глубины
   dTdL_amb_Cm = ambient_formation.amb_temp_grad_Cm(Hv_m) * sind(theta_deg)
End Function
    
Public Function d_hmes_m(ByVal z As Double) As Double
' функция возвращает внутренний диаметр трубы по заданной абсолютной измеренной глубине (если труба проходит по этой глубине)
   d_hmes_m = curve("c_Diam").getPoint(z)
End Function
Public Function roughness_h_mes_m(ByVal z As Double) As Double
' возвращает шероховатость по измеренной глубине
   roughness_h_mes_m = curve("c_Roughness").getPoint(z)
End Function
Public Function angle_hmes_deg(ByVal z As Double) As Double
' возвращает угол по измеренной глубине
   angle_hmes_deg = curve("c_Theta").getPoint(z)
End Function
Public Function h_vert_h_mes_m(ByVal z As Double) As Double
' возвращает угол по измеренной глубине
   h_vert_h_mes_m = curve("c_Hvert").getPoint(z)
End Function
Public Function p_h_mes_atma(ByVal z As Double) As Double
' возвращает угол по измеренной глубине
   p_h_mes_atma = curve("c_P").getPoint(z)
End Function
Public Function t_h_mes_C(ByVal z As Double) As Double
' возвращает угол по измеренной глубине
   t_h_mes_C = curve("c_T").getPoint(z)
End Function
' инициализация трубы через данные по траектории скважины
Public Sub init_pipe_constr_by_trajectory( _
                            ByVal tr As CPipeTrajectory, _
                   Optional ByVal HmesStart_m As Variant, _
                   Optional ByVal HmesEnd_m As Variant, _
                   Optional tr_cas As CPipeTrajectory, _
                   Optional ByVal srv_points_step As Integer = 100)
                   
    Dim i As Integer
    Dim h As Double
    Dim p_pipe_segments_num As Integer
    
    If IsMissing(HmesStart_m) Then HmesStart_m = tr.h_mes_m(0)
    If IsMissing(HmesEnd_m) Then HmesEnd_m = tr.h_mes_m(tr.num_points - 1)
    
    curve("c_Diam").isStepFunction = True
    ZeroCoordMes_m = HmesStart_m
    ZeroCoordVert_m = tr.h_abs_hmes_m(HmesStart_m)
    p_pipe_segments_num = tr.num_points - 1
    ' по умолчанию используем все сегменты которые были заданы в траектории
    For i = 0 To p_pipe_segments_num + 2
         If i = 0 Then
            h = HmesStart_m
         ElseIf i = 1 Then
            h = HmesEnd_m
         Else
             h = tr.h_mes_m(i - 2)
         End If
         If h >= HmesStart_m And h <= HmesEnd_m Then
            ' теперь  заполним кривые соответствующие траектории скважины  - в первый раз пишем нулевую точку
            If IsMissing(tr_cas) Or tr_cas Is Nothing Then
                curve("c_Diam").AddPoint h, tr.diam_hmes_m(h)    ' НКТ
            Else
                curve("c_Diam").AddPoint h, tr_cas.diam_hmes_m(h) - tr.diam_hmes_m(h)   ' затруб
            End If
            curve("c_Roughness").AddPoint h, tr.roughness_m
            curve("c_Theta").AddPoint h, tr.ang_hmes_deg(h)
            curve("c_Hvert").AddPoint h, tr.h_abs_hmes_m(h)
         End If
    Next i
    curve("c_Diam").protected = True
    curve("c_Roughness").protected = True
    curve("c_Theta").protected = True
    curve("c_Hvert").protected = True
    
    legth_total_m_ = HmesEnd_m - HmesStart_m
    depth_vert_total_m_ = tr.h_abs_hmes_m(HmesEnd_m) - tr.h_abs_hmes_m(HmesStart_m)
    h_mes_insert_m_.ClearPoints
    h_mes_insert_m_.AddPoint ZeroCoordMes_m, 0
    h_mes_insert_m_.AddPoint ZeroCoordMes_m + length_mes_m, 0
    Call add_h_mes_save_m(param_.length_gas_m)
    
    StepHmCurve = srv_points_step
End Sub
Public Function init_pipe(ByVal d_mm, _
                         ByVal length_m, _
                         ByVal theta_deg, _
                         Optional ByVal roughness_m = 0.00001, _
                         Optional Hmes0_m As Double = 0)
' простой метод инициализации трубы по двум точкам
' используется для учебных примеров в функциях Excel
    Dim arr_h(1 To 2, 1 To 2) As Double
    Dim arr_d(1 To 2, 1 To 3) As Double
    Dim tr As New CPipeTrajectory
    
    
    arr_h(1, 1) = 0
    arr_h(2, 1) = length_m
    arr_h(1, 2) = 0
    arr_h(2, 2) = length_m * Abs(Sin(theta_deg / 180 * const_Pi))
    
    arr_d(1, 1) = 0
    arr_d(2, 1) = length_m
    arr_d(1, 2) = d_mm
    arr_d(2, 2) = d_mm
    arr_d(1, 3) = roughness_m
    arr_d(2, 3) = roughness_m
    Call tr.init_from_vert_range(arr_h, arr_d)
    tr.roughness_m = roughness_m
    
    Call init_pipe_constr_by_trajectory(tr)
End Function
'=================================================================================================
' новый подход - можно обойтись без разделение на прямой участок и кривой - расчет за один проход.
'=================================================================================================
Public Function calc_grad(l_m As Double, _
                         p_atma As Double, _
                         t_C As Double, _
                         Optional calc_dtdl As Boolean = True, _
                         Optional pcas_atma As Double = 0.95) As PIPE_FLOW_PARAMS
' функция расчета градиента давления и температуры в скважине при заданных параметрах
' возвращает все параметры потока в заданной точке трубы при заданых термобарических условиях.
'
'
'
'  L_m      - измеренная глубина на которой ведется расчет, нужна для привязки по температуре
'  p_atma   - давление в заданной точке
'  T_C      - температура в заданной точке
'  calc_dtdl
'  pcas_atma - затрубное давление для оптимизации расчета барботажа в затрубе
'Allocate variables used to output auxilary values
Dim dpdlg_out As Double
Dim dpdlf_out As Double
Dim dpdla_out As Double
Dim v_sl_out As Double
Dim v_sg_out As Double
Dim vl_msec As Double
Dim vg_msec As Double
Dim h_l_out As Double
Dim fpat_out
Dim d_m As Double   ' диаметр трубы по которой идет поток
Dim theta_deg As Double ' угол наклона трубы в расчете
Dim theta_sign As Integer
Dim rough_m As Double   ' шероховатость
Dim Hv_m As Double
Dim dp_dl As Double, dp_dl_arr
Dim dt_dl As Double
Dim v As Double, dvdL As Double
If param_.FlowAlongCoord Then
    theta_sign = -1
Else
    theta_sign = 1
End If
d_m = d_hmes_m(l_m)                ' определяем диаметр на указанной глубине
theta_deg = theta_sign * angle_hmes_deg(l_m)   ' определяем наклон на заданной глубине
rough_m = roughness_h_mes_m(l_m)       ' определяем шероховатость на заданной глубине
Hv_m = h_vert_h_mes_m(l_m)              ' определяем вертикальную глубину для заданной измеренной глубины
With fluid
  'проверим на корректность исходных данных
    If p_atma < const_minPpipe_atma Then
        dp_dl = 0
        GoTo endlab:
    End If
  
    Call .calc_PVT(p_atma, t_C)             ' найдем все PVT в заданных условиях
    If .q_mix_rc_m3day = 0 Then
        t_C = ambient_formation.amb_temp_C(Hv_m)
    End If
    
    ReDim dp_dl_arr(7) As Double
    dp_dl_arr(0) = 0
    dp_dl_arr(1) = 0
    dp_dl_arr(2) = 0
    dp_dl_arr(3) = 0
    dp_dl_arr(4) = 0
    dp_dl_arr(5) = 0
    dp_dl_arr(6) = 0
    dp_dl_arr(7) = 101
    
    Dim corr As H_CORRELATION
    If l_m < param_.length_gas_m Then
        corr = gas
    Else
        corr = param_.correlation
    End If
    
    Select Case corr
        Case BeggsBrill
            dp_dl_arr = unf_BegsBrillGradient(d_m, theta_deg, rough_m, .qliq_rc_m3day, .q_gas_rc_m3day, .mu_liq_cP, .mu_gas_cP, .sigma_liq_Nm, _
                                  .rho_liq_rc_kgm3, .rho_gas_rc_kgm3, 0, 1, c_calibr_grav, c_calibr_fric)
        Case Ansari
            If p_atma > pcas_atma Then
                dp_dl_arr = unf_AnsariGradient(d_m, theta_deg, rough_m, .qliq_rc_m3day, .q_gas_rc_m3day, .mu_liq_cP, .mu_gas_cP, .sigma_liq_Nm, _
                                  .rho_liq_rc_kgm3, .rho_gas_rc_kgm3, p_atma, , c_calibr_grav, c_calibr_fric)
            End If
        Case gas
            If p_atma > pcas_atma Then
                dp_dl_arr = unf_GasGradient(d_m, theta_deg, rough_m, .q_gas_rc_m3day, .mu_gas_cP, _
                                           .rho_gas_rc_kgm3, p_atma)
                ' gas gradient do not use calibration coeficients
            End If
        Case Unified
            dp_dl_arr = unf_UnifiedTUFFPGradient(d_m, theta_deg, rough_m, .qliq_rc_m3day, .q_gas_rc_m3day, .mu_liq_cP, .mu_gas_cP, .sigma_liq_Nm, _
                                  .rho_liq_rc_kgm3, .rho_gas_rc_kgm3, p_atma, , c_calibr_grav, c_calibr_fric)
        Case Gray
            dp_dl_arr = unf_GrayModifiedGradient(d_m, theta_deg, rough_m, .qliq_rc_m3day, .q_gas_rc_m3day, .mu_liq_cP, .mu_gas_cP, .sigma_liq_Nm, _
                                  .rho_liq_rc_kgm3, .rho_gas_rc_kgm3, 0, 1, , c_calibr_grav, c_calibr_fric)
        Case HagedornBrown
            dp_dl_arr = unf_HagedornandBrawnmodified(d_m, theta_deg, rough_m, .qliq_rc_m3day, .q_gas_rc_m3day, .mu_liq_cP, .mu_gas_cP, .sigma_liq_Nm, _
                                  .rho_liq_rc_kgm3, .rho_gas_rc_kgm3, p_atma, 0, 1, , c_calibr_grav, c_calibr_fric)
        Case SakharovMokhov
            dp_dl_arr = unf_Saharov_Mokhov_Gradient(d_m, theta_deg, rough_m, p_atma, .q_oil_sm3day, .q_wat_sm3day, .q_gas_sm3day, .bo_m3m3, _
                                      .bw_m3m3, .bg_m3m3, .rs_m3m3, .mu_oil_cP, .mu_wat_cP, .mu_gas_cP, .sigma_oil_gas_Nm, .sigma_wat_gas_Nm, .rho_oil_sckgm3, .rho_wat_sckgm3, .rho_gas_sckgm3, _
                                      , , , c_calibr_grav, c_calibr_fric)
    End Select
    
    dp_dl = theta_sign * dp_dl_arr(0)
    dpdlg_out = theta_sign * dp_dl_arr(1)
    dpdlf_out = theta_sign * dp_dl_arr(2)
    dpdla_out = theta_sign * dp_dl_arr(3)
    v_sl_out = dp_dl_arr(4)
    v_sg_out = dp_dl_arr(5)
    h_l_out = dp_dl_arr(6)
    fpat_out = dp_dl_arr(7)
    vl_msec = v_sl_out * const_Pi * d_m ^ 2 / 4 ' скорость жидкости реальная
    vg_msec = v_sg_out * const_Pi * d_m ^ 2 / 4 ' скорость жидкости реальная
    ' для оценки температуры оценим скорость потока и ускорение
    
    ' теперь зададим изменение температуры в потоке
    If calc_dtdl Then
        Select Case param.temp_method
              Case StartEndTemp
                  dt_dl = dTdL_linear_Cm(Hv_m)
              Case GeoGradTemp
                  dt_dl = dTdL_amb_Cm(Hv_m)
              Case AmbientTemp
                  v = vg_msec    ' оценка сверху
                  dvdL = -v / p_atma * dp_dl
                  dt_dl = ambient_formation.calc_dtdl_Cm(Hv_m, sind(theta_deg), t_C, .wm_kgsec, .cmix_JkgC, _
                                                          dp_dl, v, dvdL, .cJT_Katm, Not param_.FlowAlongCoord)
        End Select
    End If
    ' тут надо записать в результаты все расчетные параметры
    Dim res As PIPE_FLOW_PARAMS
 
 
         res.md_m = l_m                                 ' pipe measured depth (from start - top)
         res.vd_m = Hv_m                                ' pipe vertical depth from start - top
         res.diam_mm = d_m * 1000
         res.dpdl_a_atmm = dpdla_out                    ' acceleration gradient at measured depth
         res.dpdl_f_atmm = dpdlf_out                    ' friction gradient at measured depth
         res.dpdl_g_atmm = dpdlg_out                    ' gravity gradient at measured depth
         res.fpat = fpat_out                            ' flow pattern code
         res.gasfrac = fluid.gas_fraction_d()
         res.h_l_d = h_l_out                            ' liquid hold up
         res.Qg_m3day = fluid.q_gas_rc_m3day
         res.p_atma = p_atma                              '  pipe pressure at measured depth
         res.t_C = t_C                                  ' pipe temp at measured depth
         res.v_sl_msec = v_sl_out                       ' superficial liquid velosity
         res.v_sg_msec = v_sg_out                       ' superficial gas velosity
         res.thete_deg = theta_deg                      '
         res.roughness_m = rough_m                      '
         res.rs_m3m3 = fluid.rs_m3m3                    ' растворенный газ в нефти в потоке
         res.gasfrac = fluid.gas_fraction_d              ' расходное содержание газа в потоке
         res.mu_oil_cP = fluid.mu_oil_cP                      ' вязкость нефть в потоке
         res.mu_wat_cP = fluid.mu_wat_cP                      ' вязкость воды в потоке
         res.mu_gas_cP = fluid.mu_gas_cP                      ' вязкость газа в потоке
         res.mu_mix_cP = fluid.mu_mix_cP                  ' вязкость смеси в потоке
         res.Rhoo_kgm3 = fluid.rho_oil_rc_kgm3             ' плотность нефти
         res.Rhow_kgm3 = fluid.rho_wat_rc_kgm3           ' плотность воды
         res.rhol_kgm3 = fluid.rho_liq_rc_kgm3             ' плотность жидкости
         res.Rhog_kgm3 = fluid.rho_gas_rc_kgm3             ' плотность газа
         res.rhomix_kgm3 = fluid.rho_mix_rc_kgm3           ' плотность смеси в потоке
         res.q_oil_m3day = fluid.q_oil_rc_m3day                  ' расход нефти в рабочих условиях
         res.qw_m3day = fluid.q_wat_rc_m3day                  ' расход воды в рабочих условиях
         res.Qg_m3day = fluid.q_gas_rc_m3day            ' расход газа в рабочих условиях
         res.mo_kgsec = fluid.mo_kgsec                  ' массовый расход нефти в рабочих условиях
         res.mw_kgsec = fluid.mw_kgsec                  ' массовый расход воды в рабочих условиях
         res.mg_kgsec = fluid.mg_kgsec                  ' массовый расход газа в рабочих условиях
         res.vl_msec = vl_msec  ' скорость жидкости реальная
         res.vg_msec = vg_msec  ' скорость газа реальная
endlab:
 res.dp_dl = dp_dl
 res.dt_dl = dt_dl
 calc_grad = res
End With
End Function
Public Function calc_dPipe(ByVal p_atma As Double, _
                  Optional ByVal t_C As Double, _
                  Optional ByVal saveCurve As CALC_RESULTS = nocurves) As PTtype
' здесь выбираем метод расчета
' если не надо рассчитывать эмисию тепла - то можно расчет делать только по давлению - это быстрее
' если температуру рассчитываем то решаем систему и по давлению и по температуре - медленнее
' если для расчета нужна стартовая температура флюида то берется из t_calc_C
    Dim PTres As PTtype
    
    If fluid.gas_only Then
        param_.correlation = gas
    ElseIf fluid.qliq_sm3day <= const_ZNLF_rate Then
        param_.correlation = Ansari
        If param_.temp_method = 2 Then param_.temp_method = 1
        fluid.ZNLF = True
    End If
    
    If Not IsMissing(t_C) Then
        t_calc_C = t_C
    End If
    
    If length_mes_m = 0 Then
        PTres.p_atma = p_atma
        PTres.t_C = t_calc_C
    Else
        If param.temp_method = AmbientTemp And param.CalcAlongCoord = param.FlowAlongCoord Then
            ' расчет температуры с учетом эмисиии тепла в окружающее пространство возможен
            ' только если расчет делается по направлению потока
            PTres = calc_dPipe_2d(p_atma, t_calc_C, saveCurve)
        Else
            PTres = calc_dPipe_1d(p_atma, saveCurve)
        End If
    End If
    p_result_atma = PTres.p_atma
    t_result_C = PTres.t_C
    calc_dPipe = PTres
End Function
Private Function calc_dPipe_2d(p_atma As Double, t_C As Double, Optional saveCurve As CALC_RESULTS = nocurves) As PTtype
' новая версия расчета перепада давления в трубе, сразу с учетом инклинометрии
' основан на применении ODEsolver
' PT   - термобарические условия в точке задания условия по давлению
' SaveCurve - флаг показывающий необходимость сохранения детальных результатов расчета
' t_other_C  - опциональное значение температуры на другом конце трубы, необходимо при линейном
'             распределении температуры
Dim Y0(1) As Double   ' начальные значения для проведения расчета
Dim n, M As Long
Dim x() As Double, y() As Double     ' массив глубин для которых нужны значения
Dim eps As Double
Dim Step As Double
Dim State As ODESolverState
Dim Rtn As Boolean
Dim i As Integer
Dim pfp As PIPE_FLOW_PARAMS
Dim Rep As ODESolverReport
Dim stPt As Boolean
'ReDim Y0(1)
On Error GoTo err1:
    eps = 0.01
    Step = 10
    Y0(0) = p_atma
    Y0(1) = t_C
    n = 2                   ' размер системы  - две переменные - давление и температура
    M = hm_curve_.num_points ' количество точек для которых надо выдать ответ
    ' формируем массив глубин для расчета давления
    ' учитываем, что массив глубин зависит от направления в котором отсчитываем координаты
    ReDim x(M - 1)
    
    If param.CalcAlongCoord Then
        For i = 0 To M - 1
            x(i) = hm_curve_.pointX(i + 1)
        Next i
    Else
        For i = 0 To M - 1
            x(i) = hm_curve_.pointX(M - i)
        Next i
    End If
      ' проверка - если поток в скважине нулевой, тогда температура равна температуре окружающей среды
      ' без такой проверки расчет градиента температуры сходит с ума
    If fluid.qliq_sm3day = 0 Then
        Y0(1) = ambient_formation.amb_temp_C(x(0))
    End If
        
 '   Y = solve_ode("calc_grad_2d", Y0, x, coeffA, Eps)
    
    Call ODESolverRKCK(Y0(), n, x, M, eps, Step, State)
    ' Loop through the AlgLib solver routine and the external ODE
    ' evaluation routine until the solver routine returns "False",
    ' which indicates that it has finished.
    ' The VBA function named in "FuncName" is called using
    ' the Application.Run method.
    Rtn = True
    i = 0
    Do While Rtn = True And i < 10000
        Rtn = ODESolverIteration(State)
        pfp = calc_grad(State.x, State.y(0), State.y(1))    ' Application.Run(FuncName, State.X, State.Y, CoeffA)
        State.DY(0) = pfp.dp_dl
        State.DY(1) = pfp.dt_dl
        i = i + 1
    Loop
     ' Extract the desired results from the State
     ' object using the appropriate AlgLib routine
    Call ODESolverResults(State, M, x, y, Rep)
    ' If necessary convert the AlgLib output array(s) to
    ' a form suitable for Excel.  In this case YA2 is
    ' a 2D base 0 array, which may be assigned to the
    ' function return value without further processing.
    ' Assign the output array to the function return value
    ' ODE = YA2
    
    ' подговим выходные результаты функции
    calc_dPipe_2d.p_atma = y(M - 1, 0)
    calc_dPipe_2d.t_C = y(M - 1, 1)
    If saveCurve > 0 Then
    ' сохраним результаты расчета для отображения на графиках
        curve("c_P").ClearPoints
        curve("c_T").ClearPoints
        curve("c_Tamb").ClearPoints
        For i = 0 To M - 1
            stPt = i = 0 Or i = M - 1
            curve("c_P").AddPoint x(i), y(i, 0), stPt
            curve("c_T").AddPoint x(i), y(i, 1), stPt
            If param.temp_method = AmbientTemp Then
                curve("c_Tamb").AddPoint x(i), ambient_formation.amb_temp_C(curve("c_Hvert").getPoint(x(i))), stPt
            Else
                curve("c_Tamb").AddPoint x(i), y(i, 1), stPt
            End If
        Next i
        curve("c_P").protected = True
        curve("c_T").protected = True
        curve("c_Tamb").protected = True
        If saveCurve > 1 Then
            Call FillDetailedCurve
        End If
    End If
    Exit Function
err1:
    addLogMsg ("CPipe.calc_dPipe_2d: ошибка какая то")
    Err.Raise Err.Number, Err.source, Err.Description
End Function
Private Function calc_dPipe_1d(p_atma As Double, Optional saveCurve As CALC_RESULTS = nocurves) As PTtype
' новая версия расчета перепада давления в трубе, сразу с учетом инклинометрии
' основан на применении ODEsolver
' проверка работы одномерного решателя - ради скорости расчета
Dim Y0(0) As Double   ' начальные значения для проведения расчета
Dim n, M As Long
Dim x() As Double, y() As Double     ' массив глубин для которых нужны значения
Dim eps As Double
Dim Step As Double
Dim State As ODESolverState
Dim Rtn As Boolean
Dim i As Integer
Dim pfp As PIPE_FLOW_PARAMS
Dim Rep As ODESolverReport
Dim stPt As Boolean
On Error GoTo err1:
    eps = 0.1
    Step = 10
    Y0(0) = p_atma
    
'    Y0(1) = PT.T_C
    n = 1                   ' размер системы  - одна переменные - давление и температура
    M = hm_curve_.num_points ' количество точек для которых надо выдать ответ
    ' формируем массив глубин для расчета давления
    ' учитываем, что массив глубин зависит от направления в котором отсчитываем координаты
    ReDim x(M - 1)
    If param.CalcAlongCoord Then
        For i = 0 To M - 1
            x(i) = hm_curve_.pointX(i + 1)
        Next i
    Else
        For i = 0 To M - 1
            x(i) = hm_curve_.pointX(M - i)
        Next i
    End If
      ' проверка - если поток в скважине нулевой, тогда температура равна температуре окружающей среды
      ' без такой проверки расчет градиента температуры сходит с ума
'    If fluid.qliq_sm3day = 0 Then
'        Y0(1) = ambient_formation.amb_temp_C(X(0))
'    End If
    Call ODESolverRKCK(Y0(), n, x, M, eps, Step, State)
    ' Loop through the AlgLib solver routine and the external ODE
    ' evaluation routine until the solver routine returns "False",
    ' which indicates that it has finished.
    ' The VBA function named in "FuncName" is called using
    ' the Application.Run method.
    Rtn = True
    i = 0
    Do While Rtn = True And i < 10000
        Rtn = ODESolverIteration(State)
        If State.y(0) < const_minPpipe_atma Then
        ' при расчете давления получили отрицательные значения
        ' может происходить про расчете в затрубе
        ' тогда имитируем правильное завершение работы цикла
            State.RepTerminationType = 2
            Rtn = False
        End If
        pfp = calc_grad(State.x, State.y(0), t_init_C(State.x), calc_dtdl:=False)
        State.DY(0) = pfp.dp_dl
        i = i + 1
    Loop
     ' Extract the desired results from the State
     ' object using the appropriate AlgLib routine
    Call ODESolverResults(State, M, x, y, Rep)
    ' If necessary convert the AlgLib output array(s) to
    ' a form suitable for Excel.  In this case YA2 is
    ' a 2D base 0 array, which may be assigned to the
    ' function return value without further processing.
    ' Assign the output array to the function return value
    ' ODE = YA2
    
    ' подговим выходные результаты функции
    calc_dPipe_1d.p_atma = y(M - 1, 0)
    calc_dPipe_1d.t_C = t_init_C(x(M - 1))
    If saveCurve > 0 Then
    ' сохраним результаты расчета для отображения на графиках
        curve("c_P").ClearPoints
        curve("c_T").ClearPoints
        curve("c_Tamb").ClearPoints
        For i = 0 To M - 1
'            stPt = h_mes_insert_m_.TestPoint(x(i)) >= 0
            If h_mes_insert_m_.TestPoint(x(i)) >= 0 Then
                stPt = True
            Else
                stPt = False
            End If
            curve("c_P").AddPoint x(i), y(i, 0), stPt
            curve("c_T").AddPoint x(i), t_init_C(x(i)), stPt
            curve("c_Tamb").AddPoint x(i), t_init_C(x(i)), stPt
        Next i
        curve("c_P").protected = True
        curve("c_T").protected = True
        curve("c_Tamb").protected = True
        If saveCurve > 1 Then
            Call FillDetailedCurve
        End If
    End If
    Exit Function
err1:
    addLogMsg ("CPipe.calc_dPipe_1d: ошибка какая то")
    Err.Raise Err.Number, Err.source, Err.Description
End Function
Private Sub FillDetailedCurve()
' функция расчета  детальных распределений параметров по длине трубы
    Dim i As Integer
    Dim M As Integer
    Dim FlowParams_out As PIPE_FLOW_PARAMS
    M = curve("c_P").num_points
    Call curve.ClearPoints_unprotected
    For i = 1 To M
        FlowParams_out = calc_grad(curve("c_P").pointX(i), _
                                    curve("c_P").PointY(i), _
                                    curve("c_T").PointY(i))
        With FlowParams_out
            curve("c_udl_m").AddPoint .md_m, .md_m - .vd_m
            curve("c_dpdl_g").AddPoint .md_m, .dpdl_g_atmm
            curve("c_dpdl_f").AddPoint .md_m, .dpdl_f_atmm
            curve("c_dpdl_a").AddPoint .md_m, .dpdl_a_atmm
            curve("c_vsl").AddPoint .md_m, .v_sl_msec
            curve("c_vsg").AddPoint .md_m, .v_sg_msec
            curve("c_Hl").AddPoint .md_m, .h_l_d
            curve("c_fpat").AddPoint .md_m, .fpat
            curve("c_Theta").AddPoint .md_m, .thete_deg
            curve("c_Roughness").AddPoint .md_m, .roughness_m
            curve("c_Rs").AddPoint .md_m, .rs_m3m3
            curve("c_gasfrac").AddPoint .md_m, .gasfrac
            curve("c_muo").AddPoint .md_m, .mu_oil_cP
            curve("c_muw").AddPoint .md_m, .mu_wat_cP
            curve("c_mug").AddPoint .md_m, .mu_gas_cP
            curve("c_mumix").AddPoint .md_m, .mu_mix_cP
            curve("c_rhoo").AddPoint .md_m, .Rhoo_kgm3
            curve("c_rhow").AddPoint .md_m, .Rhow_kgm3
            curve("c_rhol").AddPoint .md_m, .rhol_kgm3
            curve("c_rhog").AddPoint .md_m, .Rhog_kgm3
            curve("c_rhomix").AddPoint .md_m, .rhomix_kgm3
            curve("c_qo").AddPoint .md_m, .q_oil_m3day
            curve("c_qw").AddPoint .md_m, .qw_m3day
            curve("c_qg").AddPoint .md_m, .Qg_m3day
            curve("c_mo").AddPoint .md_m, .mo_kgsec
            curve("c_mw").AddPoint .md_m, .mw_kgsec
            curve("c_mg").AddPoint .md_m, .mg_kgsec
            curve("c_vl").AddPoint .md_m, .vl_msec
            curve("c_vg").AddPoint .md_m, .vg_msec
        End With
    Next i
End Sub
Public Property Get p_curve() As CInterpolation
    Set p_curve = curve("c_P")
End Property
Public Function array_out(Optional ByVal num_points As Integer = 20)
' подготовка массива для вывода в Excel
' num_points - количество точек в выходных массивах для вывода
'
    Dim arr()
    Dim M As Integer
    Dim FlowParams_out As PIPE_FLOW_PARAMS
    Dim offset As Integer
    Dim i As Integer
    Dim hh As Double
    
    offset = 2
On Error Resume Next
    Dim crv_P As CInterpolation
    Dim crv_T As CInterpolation
    
    ' rearrange output curves one time here - will be used later
    Set crv_P = curve("c_P").ClonePointsToNum(num_points)
    Set crv_T = curve("c_T").ClonePointsToNum(num_points)
    
    M = crv_P.num_points
    
    ReDim arr(M + offset, 40)
    
    arr(0, 0) = p_result_atma
    arr(0, 1) = t_result_C
    arr(0, 2) = crv_P.PointY(1)
    arr(0, 3) = crv_T.PointY(1)
    arr(0, 4) = crv_P.PointY(M)
    arr(0, 5) = crv_T.PointY(M)
    arr(0, 6) = c_calibr_grav_
    arr(0, 7) = c_calibr_fric_
    arr(0, 8) = fluid.q_gas_sm3day
    
    arr(0, 9) = 0
    arr(0, 10) = 0
    arr(0, 11) = 0
    arr(0, 12) = 0
    arr(0, 13) = 0
    arr(0, 14) = 0
    arr(0, 15) = 0
    arr(0, 16) = 0
    arr(0, 17) = 0
    arr(0, 18) = 0
    arr(0, 19) = 0
    arr(0, 20) = 0
    arr(0, 21) = 0
    arr(0, 22) = 0
    arr(0, 23) = 0
    arr(0, 24) = 0
    arr(0, 25) = 0
    arr(0, 26) = 0
    arr(0, 27) = 0
    arr(0, 28) = 0
    arr(0, 29) = 0
    arr(0, 30) = 0
    arr(0, 31) = 0
    arr(0, 32) = 0
    arr(0, 33) = 0
    arr(0, 34) = 0
    arr(0, 35) = 0
    arr(0, 36) = 0
    arr(0, 37) = 0
    arr(0, 38) = 0
    arr(0, 39) = 0
    arr(0, 40) = 0
    
    arr(1, 0) = "p_result_atma"
    arr(1, 1) = "t_result_C"
    arr(1, 2) = "p_1, atma"
    arr(1, 3) = "t_1, C"
    arr(1, 4) = "p_2, atma"
    arr(1, 5) = "t_2, C"
    arr(1, 6) = "c_calibr_grav"
    arr(1, 7) = "c_calibr_fric"
    arr(1, 8) = "q_gas_sm3day"
    
    arr(1, 9) = "q_gas_sm3day"
    arr(1, 10) = 0
    arr(1, 11) = 0
    arr(1, 12) = 0
    arr(1, 13) = 0
    arr(1, 14) = 0
    arr(1, 15) = 0
    arr(1, 16) = 0
    arr(1, 17) = 0
    arr(1, 18) = 0
    arr(1, 19) = 0
    arr(1, 20) = 0
    arr(1, 21) = 0
    arr(1, 22) = 0
    arr(1, 23) = 0
    arr(1, 24) = 0
    arr(1, 25) = 0
    arr(1, 26) = 0
    arr(1, 27) = 0
    arr(1, 28) = 0
    arr(1, 29) = 0
    arr(1, 30) = 0
    arr(1, 31) = 0
    arr(1, 32) = 0
    arr(1, 33) = 0
    arr(1, 34) = 0
    arr(1, 35) = 0
    arr(1, 36) = 0
    arr(1, 37) = 0
    arr(1, 38) = 0
    arr(1, 39) = 0
    arr(1, 40) = 0
    
    arr(offset, 0) = "num"
    arr(offset, 1) = "h,m"
    arr(offset, 2) = "hvert,m"
    arr(offset, 3) = "p,atma"
    arr(offset, 4) = "t,C"
    arr(offset, 5) = "Hl"
    arr(offset, 6) = "fpat"
    arr(offset, 7) = "t_amb, C"
    arr(offset, 8) = "diam, mm"
    
    arr(offset, 9) = "c_Roughness" 'python_output
    arr(offset, 10) = "c_Theta"
    arr(offset, 11) = "c_Tinit"
    arr(offset, 12) = "c_P"
    arr(offset, 13) = "c_T"
    arr(offset, 14) = "c_Tamb"
    arr(offset, 15) = "c_udl_m"
    arr(offset, 16) = "c_dpdl_g"
    arr(offset, 17) = "c_dpdl_f"
    arr(offset, 18) = "c_dpdl_a"
    arr(offset, 19) = "c_vsl"
    arr(offset, 20) = "c_vsg"
    arr(offset, 21) = "c_Hl"
    arr(offset, 22) = "c_gasfrac"
    arr(offset, 23) = "c_muo"
    arr(offset, 24) = "c_muw"
    arr(offset, 25) = "c_mug"
    arr(offset, 26) = "c_mumix"
    arr(offset, 27) = "c_rhoo"
    arr(offset, 28) = "c_rhow"
    arr(offset, 29) = "c_rhol"
    arr(offset, 30) = "c_rhog"
    arr(offset, 31) = "c_rhomix"
    arr(offset, 32) = "c_qo"
    arr(offset, 33) = "c_qw"
    arr(offset, 34) = "c_qg"
    arr(offset, 35) = "c_mo"
    arr(offset, 36) = "c_mw"
    arr(offset, 37) = "c_mg"
    arr(offset, 38) = "c_vl"
    arr(offset, 39) = "c_vg"
    
    arr(offset, 40) = "c_Rs"
    
    
    For i = 1 To M
        arr(offset + i, 0) = i
        hh = crv_P.pointX(i)
        arr(offset + i, 1) = hh
        arr(offset + i, 2) = curve("c_Hvert").getPoint(hh)
        arr(offset + i, 3) = crv_P.PointY(i)
        arr(offset + i, 4) = curve("c_T").getPoint(hh)
        arr(offset + i, 5) = curve("c_Hl").getPoint(hh)
        arr(offset + i, 6) = curve("c_fpat").getPoint(hh)
        arr(offset + i, 7) = curve("c_Tamb").getPoint(hh)
        arr(offset + i, 8) = curve("c_Diam").getPoint(hh)
        
        arr(offset + i, 9) = curve("c_Roughness").getPoint(hh)
        arr(offset + i, 10) = curve("c_Theta").getPoint(hh)
        arr(offset + i, 11) = curve("c_Tinit").getPoint(hh)
        arr(offset + i, 12) = curve("c_P").getPoint(hh)
        arr(offset + i, 13) = curve("c_T").getPoint(hh)
        arr(offset + i, 14) = curve("c_Tamb").getPoint(hh)
        arr(offset + i, 15) = curve("c_udl_m").getPoint(hh)
        arr(offset + i, 16) = curve("c_dpdl_g").getPoint(hh)
        arr(offset + i, 17) = curve("c_dpdl_f").getPoint(hh)
        arr(offset + i, 18) = curve("c_dpdl_a").getPoint(hh)
        arr(offset + i, 19) = curve("c_vsl").getPoint(hh)
        arr(offset + i, 20) = curve("c_vsg").getPoint(hh)
        arr(offset + i, 21) = curve("c_Hl").getPoint(hh)
        arr(offset + i, 22) = curve("c_gasfrac").getPoint(hh)
        arr(offset + i, 23) = curve("c_muo").getPoint(hh)
        arr(offset + i, 24) = curve("c_muw").getPoint(hh)
        arr(offset + i, 25) = curve("c_mug").getPoint(hh)
        arr(offset + i, 26) = curve("c_mumix").getPoint(hh)
        arr(offset + i, 27) = curve("c_rhoo").getPoint(hh)
        arr(offset + i, 28) = curve("c_rhow").getPoint(hh)
        arr(offset + i, 29) = curve("c_rhol").getPoint(hh)
        arr(offset + i, 30) = curve("c_rhog").getPoint(hh)
        arr(offset + i, 31) = curve("c_rhomix").getPoint(hh)
        arr(offset + i, 32) = curve("c_qo").getPoint(hh)
        arr(offset + i, 33) = curve("c_qw").getPoint(hh)
        arr(offset + i, 34) = curve("c_qg").getPoint(hh)
        arr(offset + i, 35) = curve("c_mo").getPoint(hh)
        arr(offset + i, 36) = curve("c_mw").getPoint(hh)
        arr(offset + i, 37) = curve("c_mg").getPoint(hh)
        arr(offset + i, 38) = curve("c_vl").getPoint(hh)
        arr(offset + i, 39) = curve("c_vg").getPoint(hh)
        
        arr(offset + i, 40) = curve("c_Rs").getPoint(hh)
        
        
        
        
    Next i
    array_out = arr
End Function

